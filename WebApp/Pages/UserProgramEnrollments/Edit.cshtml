@page "{id:int}"
@model WebApp.Pages.UserProgramEnrollments.EditModel
@{
    ViewData["Title"] = "Edit User Program Enrollment";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">Edit User Program Enrollment</h3>
                </div>
                <div class="card-body">
                    <form id="editUserProgramEnrollmentForm">
                        <input type="hidden" id="id" name="id" />

                        <div class="mb-3">
                            <label for="userId" class="form-label">User ID</label>
                            <input type="number" class="form-control" id="userId" name="userId" required>
                        </div>

                        <div class="mb-3">
                            <label for="programId" class="form-label">Program ID</label>
                            <input type="number" class="form-control" id="programId" name="programId" required>
                        </div>

                        <div class="mb-3">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" name="status" required>
                                <option value="Active">Active</option>
                                <option value="Completed">Completed</option>
                                <option value="Withdrawn">Withdrawn</option>
                                <!-- Add other statuses like Pending, Deferred, etc. if needed -->
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="enrolledAt" class="form-label">Enrolled At</label>
                            <input type="datetime-local" class="form-control" id="enrolledAt" name="enrolledAt" required>
                        </div>

                        <div class="mb-3">
                            <label for="expectedCompletionDate" class="form-label">Expected Completion Date (Optional)</label>
                            <input type="datetime-local" class="form-control" id="expectedCompletionDate" name="expectedCompletionDate">
                        </div>

                        <div class="d-flex justify-content-between">
                            <a href="/UserProgramEnrollments" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Back to List
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            <div id="alert" class="alert mt-3" style="display: none;"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
        const enrollmentId = '@Model.Id'; // Get ID from Model

        // Function to format date for datetime-local input
        function formatLocalDateTime(dateString) {
            if (!dateString) return '';
            const date = new Date(dateString);
            // Check if date is valid before formatting
            if (isNaN(date.getTime())) return ''; 
            // Offset the date by the timezone offset to display correctly in local time
            date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
            return date.toISOString().slice(0, 16);
        }
        
        async function loadEnrollment() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/UserProgramEnrollment/${enrollmentId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch enrollment details');
                }
                
                const enrollment = await response.json();
                document.getElementById('id').value = enrollment.id;
                document.getElementById('userId').value = enrollment.userId || '';
                document.getElementById('programId').value = enrollment.programId || '';
                document.getElementById('status').value = enrollment.status || 'Active'; // Default to 'Active' if null/empty
                document.getElementById('enrolledAt').value = formatLocalDateTime(enrollment.enrolledAt);
                document.getElementById('expectedCompletionDate').value = formatLocalDateTime(enrollment.expectedCompletionDate);

            } catch (error) {
                console.error('Error loading enrollment:', error);
                showAlert(error.message || 'Failed to load enrollment details', 'danger');
            }
        }

        document.getElementById('editUserProgramEnrollmentForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const enrolledAtValue = document.getElementById('enrolledAt').value;
            const expectedCompletionDateValue = document.getElementById('expectedCompletionDate').value;

            const enrollmentData = {
                id: document.getElementById('id').value,
                userId: document.getElementById('userId').value,
                programId: document.getElementById('programId').value,
                status: document.getElementById('status').value,
                enrolledAt: enrolledAtValue ? new Date(enrolledAtValue).toISOString() : null,
                expectedCompletionDate: expectedCompletionDateValue ? new Date(expectedCompletionDateValue).toISOString() : null
            };

            try {
                const response = await fetch(`${apiBaseUrl}/api/UserProgramEnrollment/${enrollmentData.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(enrollmentData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update enrollment');
                }

                showAlert('User Program Enrollment updated successfully!', 'success');
                setTimeout(() => {
                    window.location.href = '/UserProgramEnrollments';
                }, 1500);
            } catch (error) {
                console.error('Error:', error);
                showAlert(error.message || 'Failed to update enrollment', 'danger');
            }
        });

        // Load enrollment data when the page loads
        document.addEventListener('DOMContentLoaded', loadEnrollment);

        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type} mt-3`;
            alert.textContent = message;
            alert.style.display = 'block';
        }
    </script>
}