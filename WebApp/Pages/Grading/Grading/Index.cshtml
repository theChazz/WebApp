@page
@model WebApp.Pages.Grading.IndexModel
@{
    ViewData["Title"] = "Grading Management";
    Layout = "_AdminLayout";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold mb-1">
                <i class="fas fa-star text-warning me-2"></i>
                Grading Management
            </h2>
            <p class="text-muted mb-0">Grade submissions and manage assessment scores</p>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline-info" id="analyticsBtn">
                <i class="fas fa-chart-bar me-1"></i>
                Analytics
            </button>
            <button type="button" class="btn btn-outline-primary" id="exportBtn">
                <i class="fas fa-download me-1"></i>
                Export Grades
            </button>
            <a href="/Grading/Create" class="btn btn-success">
                <i class="fas fa-plus me-1"></i>
                New Grade
            </a>
        </div>
    </div>

    <!-- Analytics Dashboard -->
    <div class="row mb-4" id="analyticsCards">
        <div class="col-md-3">
            <div class="card border-0 bg-gradient-primary text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-white-50">Total Grades</h6>
                            <h3 class="card-title mb-0" id="totalGrades">-</h3>
                        </div>
                        <div class="text-white-50">
                            <i class="fas fa-star fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 bg-gradient-success text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-white-50">Average Grade</h6>
                            <h3 class="card-title mb-0" id="averageGrade">-</h3>
                        </div>
                        <div class="text-white-50">
                            <i class="fas fa-chart-line fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 bg-gradient-warning text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-white-50">Pending Grading</h6>
                            <h3 class="card-title mb-0" id="pendingGrading">-</h3>
                        </div>
                        <div class="text-white-50">
                            <i class="fas fa-clock fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 bg-gradient-info text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-white-50">Pass Rate</h6>
                            <h3 class="card-title mb-0" id="passRate">-</h3>
                        </div>
                        <div class="text-white-50">
                            <i class="fas fa-percentage fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Grade Distribution Chart -->
    <div class="card mb-4" id="distributionCard">
        <div class="card-header bg-white border-bottom-0">
            <h6 class="mb-0 fw-semibold">
                <i class="fas fa-chart-bar me-2"></i>
                Grade Distribution
            </h6>
        </div>
        <div class="card-body">
            <canvas id="gradeDistributionChart" width="400" height="100"></canvas>
        </div>
    </div>

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-header bg-white border-bottom-0">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0 fw-semibold">
                    <i class="fas fa-filter me-2"></i>
                    Filters
                </h6>
                <button type="button" class="btn btn-sm btn-outline-secondary" id="toggleFilters">
                    <i class="fas fa-chevron-up" id="filterToggleIcon"></i>
                </button>
            </div>
        </div>
        <div class="card-body" id="filtersSection">
            <form method="get">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Search</label>
                        <input type="text" class="form-control" asp-for="Filters.Search" placeholder="Search grades...">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Student</label>
                        <select class="form-select" asp-for="Filters.StudentId" id="studentSelect">
                            <option value="">All Students</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Assessment</label>
                        <select class="form-select" asp-for="Filters.AssessmentId" id="assessmentSelect">
                            <option value="">All Assessments</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Course</label>
                        <select class="form-select" asp-for="Filters.CourseId" id="courseSelect">
                            <option value="">All Courses</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Lecturer</label>
                        <select class="form-select" asp-for="Filters.LecturerId" id="lecturerSelect">
                            <option value="">All Lecturers</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Grading Status</label>
                        <select class="form-select" asp-for="Filters.GradingStatus">
                            <option value="">All Statuses</option>
                            <option value="NotGraded">Not Graded</option>
                            <option value="InProgress">In Progress</option>
                            <option value="Graded">Graded</option>
                            <option value="NeedsReview">Needs Review</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Grade Level</label>
                        <select class="form-select" asp-for="Filters.GradeLevel">
                            <option value="">All Levels</option>
                            <option value="A">A (90-100%)</option>
                            <option value="B">B (80-89%)</option>
                            <option value="C">C (70-79%)</option>
                            <option value="D">D (60-69%)</option>
                            <option value="F">F (Below 60%)</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Graded After</label>
                        <input type="date" class="form-control" asp-for="Filters.GradedAfter">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Grade Range</label>
                        <div class="input-group">
                            <input type="number" class="form-control" asp-for="Filters.MinGrade" placeholder="Min" step="0.01">
                            <span class="input-group-text">-</span>
                            <input type="number" class="form-control" asp-for="Filters.MaxGrade" placeholder="Max" step="0.01">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Options</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Filters.NeedsFeedback" id="needsFeedback">
                            <label class="form-check-label" for="needsFeedback">
                                Needs Feedback
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Filters.IsLate" id="isLate">
                            <label class="form-check-label" for="isLate">
                                Late Submissions
                            </label>
                        </div>
                    </div>
                    <div class="col-12">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search me-1"></i>
                            Apply Filters
                        </button>
                        <button type="button" class="btn btn-outline-secondary" id="clearFilters">
                            <i class="fas fa-times me-1"></i>
                            Clear
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Bulk Actions and View Controls -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="d-flex align-items-center gap-3">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="selectAll">
                <label class="form-check-label" for="selectAll">
                    Select All
                </label>
            </div>
            <div class="dropdown" id="bulkActionsDropdown" style="display: none;">
                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    <i class="fas fa-tasks me-1"></i>
                    Bulk Actions
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" id="bulkApprove">
                        <i class="fas fa-check me-2"></i>Approve Grades
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="bulkReview">
                        <i class="fas fa-eye me-2"></i>Mark for Review
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="bulkFeedback">
                        <i class="fas fa-comment me-2"></i>Add Bulk Feedback
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="bulkExport">
                        <i class="fas fa-download me-2"></i>Export Selected
                    </a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item text-danger" href="#" id="bulkDelete">
                        <i class="fas fa-trash me-2"></i>Delete Selected
                    </a></li>
                </ul>
            </div>
            <span class="text-muted" id="selectedCount" style="display: none;"></span>
        </div>
        <div class="d-flex align-items-center gap-2">
            <div class="btn-group" role="group">
                <input type="radio" class="btn-check" name="viewMode" id="listView" value="list" @(Model.ViewMode == "list" ? "checked" : "")>
                <label class="btn btn-outline-secondary" for="listView">
                    <i class="fas fa-list"></i>
                </label>
                <input type="radio" class="btn-check" name="viewMode" id="gridView" value="grid" @(Model.ViewMode == "grid" ? "checked" : "")>
                <label class="btn btn-outline-secondary" for="gridView">
                    <i class="fas fa-th-large"></i>
                </label>
            </div>
            <select class="form-select form-select-sm" style="width: auto;" asp-for="Filters.PageSize" id="pageSizeSelect">
                <option value="10">10 per page</option>
                <option value="20">20 per page</option>
                <option value="50">50 per page</option>
                <option value="100">100 per page</option>
            </select>
        </div>
    </div>

    <!-- Loading State -->
    <div class="text-center py-5" id="loadingState">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="text-muted mt-2">Loading grades...</p>
    </div>

    <!-- Content Area -->
    <div id="contentArea" style="display: none;">
        <!-- List View -->
        <div id="listViewContent">
            <div class="card">
                <div class="table-responsive">
                    <table class="table table-hover mb-0" id="gradingTable">
                        <thead class="table-light">
                            <tr>
                                <th width="40">
                                    <input type="checkbox" id="selectAllList">
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark" data-sort="Student">
                                        Student <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark" data-sort="Assessment">
                                        Assessment <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark" data-sort="Course">
                                        Course <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark" data-sort="Grade">
                                        Grade <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark" data-sort="GradedAt">
                                        Graded <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>Status</th>
                                <th>Lecturer</th>
                                <th width="120">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="gradingTableBody">
                            <!-- Populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Grid View -->
        <div id="gridViewContent" class="row g-3" style="display: none;">
            <!-- Populated by JavaScript -->
        </div>

        <!-- Pagination -->
        <nav aria-label="Grades pagination" id="paginationContainer" style="display: none;">
            <ul class="pagination justify-content-center mt-4" id="pagination">
                <!-- Populated by JavaScript -->
            </ul>
        </nav>
    </div>

    <!-- Empty State -->
    <div class="text-center py-5" id="emptyState" style="display: none;">
        <i class="fas fa-star fa-3x text-muted mb-3"></i>
        <h5 class="text-muted">No grades found</h5>
        <p class="text-muted">Try adjusting your filters or start grading submissions.</p>
        <a href="/Grading/Create" class="btn btn-success">
            <i class="fas fa-plus me-1"></i>
            Create New Grade
        </a>
    </div>
</div>

<!-- Bulk Feedback Modal -->
<div class="modal fade" id="bulkFeedbackModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-comment text-info me-2"></i>
                    Add Bulk Feedback
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="bulkFeedbackForm">
                    <div class="mb-3">
                        <label class="form-label">Feedback Message</label>
                        <textarea class="form-control" id="bulkFeedbackInput" rows="6" placeholder="Enter feedback for all selected grades..." required></textarea>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="appendFeedbackCheckbox">
                            <label class="form-check-label" for="appendFeedbackCheckbox">
                                Append to existing feedback (instead of replacing)
                            </label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="notifyStudentsCheckbox" checked>
                            <label class="form-check-label" for="notifyStudentsCheckbox">
                                Notify students via email
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveBulkFeedbackBtn">
                    <i class="fas fa-save me-1"></i>
                    Add Feedback
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Analytics Modal -->
<div class="modal fade" id="analyticsModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-chart-bar text-info me-2"></i>
                    Grading Analytics
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">Performance by Course</h6>
                            </div>
                            <div class="card-body">
                                <canvas id="coursePerformanceChart"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">Grading Timeline</h6>
                            </div>
                            <div class="card-body">
                                <canvas id="gradingTimelineChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        class GradingManager {
            constructor() {
                this.apiBaseUrl = '@Model.ApiBaseUrl';
                this.currentPage = @Model.Filters.Page;
                this.pageSize = @Model.Filters.PageSize;
                this.viewMode = '@Model.ViewMode';
                this.selectedItems = new Set();
                this.gradeDistributionChart = null;
                this.init();
            }

            init() {
                this.bindEvents();
                this.loadAnalytics();
                this.loadGrades();
                this.loadDropdownData();
                this.initializeChart();
            }

            bindEvents() {
                // View mode toggle
                document.querySelectorAll('input[name="viewMode"]').forEach(radio => {
                    radio.addEventListener('change', (e) => {
                        this.viewMode = e.target.value;
                        this.toggleView();
                        this.updateUrlParam('ViewMode', this.viewMode);
                    });
                });

                // Page size change
                document.getElementById('pageSizeSelect').addEventListener('change', (e) => {
                    this.pageSize = parseInt(e.target.value);
                    this.currentPage = 1;
                    this.loadGrades();
                });

                // Filter toggle
                document.getElementById('toggleFilters').addEventListener('click', () => {
                    const section = document.getElementById('filtersSection');
                    const icon = document.getElementById('filterToggleIcon');
                    section.style.display = section.style.display === 'none' ? 'block' : 'none';
                    icon.className = section.style.display === 'none' ? 'fas fa-chevron-down' : 'fas fa-chevron-up';
                });

                // Clear filters
                document.getElementById('clearFilters').addEventListener('click', () => {
                    document.querySelector('form').reset();
                    window.location.href = window.location.pathname;
                });

                // Select all functionality
                document.getElementById('selectAll').addEventListener('change', (e) => {
                    this.toggleSelectAll(e.target.checked);
                });

                // Bulk actions
                document.getElementById('bulkApprove').addEventListener('click', () => this.bulkApprove());
                document.getElementById('bulkReview').addEventListener('click', () => this.bulkReview());
                document.getElementById('bulkFeedback').addEventListener('click', () => this.openBulkFeedbackModal());
                document.getElementById('bulkExport').addEventListener('click', () => this.bulkExport());
                document.getElementById('bulkDelete').addEventListener('click', () => this.bulkDelete());

                // Modal actions
                document.getElementById('saveBulkFeedbackBtn').addEventListener('click', () => this.saveBulkFeedback());

                // Other actions
                document.getElementById('analyticsBtn').addEventListener('click', () => this.openAnalyticsModal());
                document.getElementById('exportBtn').addEventListener('click', () => this.exportGrades());
            }

            async loadAnalytics() {
                try {
                    const response = await apiUtils.get(`${this.apiBaseUrl}/api/Grading/analytics`);
                    if (response.ok) {
                        const analytics = await response.json();
                        document.getElementById('totalGrades').textContent = analytics.totalGrades || 0;
                        document.getElementById('averageGrade').textContent = analytics.averageGrade ? 
                            `${analytics.averageGrade.toFixed(1)}%` : 'N/A';
                        document.getElementById('pendingGrading').textContent = analytics.pendingGrading || 0;
                        document.getElementById('passRate').textContent = analytics.passRate ? 
                            `${analytics.passRate.toFixed(1)}%` : 'N/A';
                        
                        this.updateGradeDistributionChart(analytics.gradeDistribution);
                    }
                } catch (error) {
                    console.error('Error loading analytics:', error);
                }
            }

            async loadGrades() {
                try {
                    document.getElementById('loadingState').style.display = 'block';
                    document.getElementById('contentArea').style.display = 'none';
                    document.getElementById('emptyState').style.display = 'none';

                    const params = new URLSearchParams(window.location.search);
                    params.set('page', this.currentPage);
                    params.set('pageSize', this.pageSize);

                    const response = await apiUtils.get(`${this.apiBaseUrl}/api/Grading?${params.toString()}`);
                    
                    if (response.ok) {
                        const data = await response.json();
                        this.renderGrades(data.items || []);
                        this.renderPagination(data.pagination);
                        
                        if (data.items && data.items.length > 0) {
                            document.getElementById('contentArea').style.display = 'block';
                            this.toggleView();
                        } else {
                            document.getElementById('emptyState').style.display = 'block';
                        }
                    } else {
                        throw new Error('Failed to load grades');
                    }
                } catch (error) {
                    console.error('Error loading grades:', error);
                    this.showError('Failed to load grades. Please try again.');
                } finally {
                    document.getElementById('loadingState').style.display = 'none';
                }
            }

            renderGrades(grades) {
                if (this.viewMode === 'grid') {
                    this.renderGridView(grades);
                } else {
                    this.renderListView(grades);
                }
            }

            renderListView(grades) {
                const tbody = document.getElementById('gradingTableBody');
                tbody.innerHTML = grades.map(grade => `
                    <tr>
                        <td>
                            <input type="checkbox" class="item-checkbox" value="${grade.id}">
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="avatar avatar-sm bg-primary text-white rounded-circle me-2">
                                    ${(grade.submission?.student?.firstName?.charAt(0) || '') + (grade.submission?.student?.lastName?.charAt(0) || '')}
                                </div>
                                <div>
                                    <div class="fw-semibold">${grade.submission?.student?.firstName} ${grade.submission?.student?.lastName}</div>
                                    <small class="text-muted">${grade.submission?.student?.email}</small>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="fw-semibold">${grade.submission?.assessment?.title}</div>
                            <small class="text-muted">${grade.submission?.assessment?.assessmentType}</small>
                        </td>
                        <td>
                            <span class="badge bg-secondary">${grade.submission?.assessment?.course?.title}</span>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <span class="fw-bold text-${this.getGradeColor(grade.grade)} me-2">
                                    ${grade.grade}%
                                </span>
                                <small class="text-muted">/ ${grade.submission?.assessment?.totalPoints}</small>
                            </div>
                            <div class="progress mt-1" style="height: 4px;">
                                <div class="progress-bar bg-${this.getGradeColor(grade.grade)}" 
                                     style="width: ${grade.grade}%"></div>
                            </div>
                        </td>
                        <td>
                            <div>${this.formatDate(grade.gradedAt)}</div>
                            <small class="text-muted">by ${grade.gradedBy?.firstName} ${grade.gradedBy?.lastName}</small>
                        </td>
                        <td>
                            <span class="badge bg-${this.getGradingStatusColor(grade.gradingStatus)}">
                                ${grade.gradingStatus}
                            </span>
                        </td>
                        <td>
                            <div class="fw-semibold">${grade.gradedBy?.firstName} ${grade.gradedBy?.lastName}</div>
                            <small class="text-muted">${grade.gradedBy?.role}</small>
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a href="/Grading/Details/${grade.id}" class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a href="/Grading/Edit/${grade.id}" class="btn btn-outline-secondary btn-sm">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-outline-danger btn-sm" onclick="deleteGrade(${grade.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
            }

            renderGridView(grades) {
                const container = document.getElementById('gridViewContent');
                container.innerHTML = grades.map(grade => `
                    <div class="col-md-6 col-xl-4">
                        <div class="card h-100 shadow-sm">
                            <div class="card-header bg-white border-bottom-0 pb-0">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="form-check">
                                        <input class="form-check-input item-checkbox" type="checkbox" value="${grade.id}">
                                    </div>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary" data-bs-toggle="dropdown">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li><a class="dropdown-item" href="/Grading/Details/${grade.id}">
                                                <i class="fas fa-eye me-2"></i>View Details
                                            </a></li>
                                            <li><a class="dropdown-item" href="/Grading/Edit/${grade.id}">
                                                <i class="fas fa-edit me-2"></i>Edit Grade
                                            </a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item text-danger" href="#" onclick="deleteGrade(${grade.id})">
                                                <i class="fas fa-trash me-2"></i>Delete
                                            </a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <h6 class="card-title mb-2">
                                    <i class="fas fa-user me-1 text-primary"></i>
                                    ${grade.submission?.student?.firstName} ${grade.submission?.student?.lastName}
                                </h6>
                                <h6 class="card-subtitle mb-2 text-muted">
                                    ${grade.submission?.assessment?.title}
                                </h6>
                                <p class="card-text small text-muted mb-2">
                                    <i class="fas fa-book me-1"></i>
                                    ${grade.submission?.assessment?.course?.title}
                                </p>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="h4 mb-0 text-${this.getGradeColor(grade.grade)}">
                                        ${grade.grade}%
                                    </span>
                                    <span class="badge bg-${this.getGradingStatusColor(grade.gradingStatus)}">
                                        ${grade.gradingStatus}
                                    </span>
                                </div>
                                <div class="progress mb-2" style="height: 6px;">
                                    <div class="progress-bar bg-${this.getGradeColor(grade.grade)}" 
                                         style="width: ${grade.grade}%"></div>
                                </div>
                                <small class="text-muted">
                                    <i class="fas fa-clock me-1"></i>
                                    Graded: ${this.formatDate(grade.gradedAt)}
                                </small>
                                <div class="mt-2">
                                    <small class="text-info">
                                        <i class="fas fa-user-tie me-1"></i>
                                        by ${grade.gradedBy?.firstName} ${grade.gradedBy?.lastName}
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            toggleView() {
                const gridView = document.getElementById('gridViewContent');
                const listView = document.getElementById('listViewContent');
                
                if (this.viewMode === 'grid') {
                    gridView.style.display = 'block';
                    listView.style.display = 'none';
                } else {
                    gridView.style.display = 'none';
                    listView.style.display = 'block';
                }
            }

            getGradeColor(grade) {
                if (grade >= 90) return 'success';
                if (grade >= 80) return 'info';
                if (grade >= 70) return 'warning';
                if (grade >= 60) return 'orange';
                return 'danger';
            }

            getGradingStatusColor(status) {
                const colors = {
                    'NotGraded': 'secondary',
                    'InProgress': 'warning',
                    'Graded': 'success',
                    'NeedsReview': 'danger'
                };
                return colors[status] || 'secondary';
            }

            formatDate(dateString) {
                if (!dateString) return 'N/A';
                return new Date(dateString).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }

            async loadDropdownData() {
                try {
                    // Load students
                    const studentsResponse = await apiUtils.get(`${this.apiBaseUrl}/api/Users?role=Student`);
                    if (studentsResponse.ok) {
                        const students = await studentsResponse.json();
                        const studentSelect = document.getElementById('studentSelect');
                        students.items?.forEach(student => {
                            const option = document.createElement('option');
                            option.value = student.id;
                            option.textContent = `${student.firstName} ${student.lastName}`;
                            studentSelect.appendChild(option);
                        });
                    }

                    // Load assessments
                    const assessmentsResponse = await apiUtils.get(`${this.apiBaseUrl}/api/Assessments`);
                    if (assessmentsResponse.ok) {
                        const assessments = await assessmentsResponse.json();
                        const assessmentSelect = document.getElementById('assessmentSelect');
                        assessments.items?.forEach(assessment => {
                            const option = document.createElement('option');
                            option.value = assessment.id;
                            option.textContent = assessment.title;
                            assessmentSelect.appendChild(option);
                        });
                    }

                    // Load courses
                    const coursesResponse = await apiUtils.get(`${this.apiBaseUrl}/api/Courses`);
                    if (coursesResponse.ok) {
                        const courses = await coursesResponse.json();
                        const courseSelect = document.getElementById('courseSelect');
                        courses.items?.forEach(course => {
                            const option = document.createElement('option');
                            option.value = course.id;
                            option.textContent = course.title;
                            courseSelect.appendChild(option);
                        });
                    }

                    // Load lecturers
                    const lecturersResponse = await apiUtils.get(`${this.apiBaseUrl}/api/Users?role=Lecturer`);
                    if (lecturersResponse.ok) {
                        const lecturers = await lecturersResponse.json();
                        const lecturerSelect = document.getElementById('lecturerSelect');
                        lecturers.items?.forEach(lecturer => {
                            const option = document.createElement('option');
                            option.value = lecturer.id;
                            option.textContent = `${lecturer.firstName} ${lecturer.lastName}`;
                            lecturerSelect.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.error('Error loading dropdown data:', error);
                }
            }

            initializeChart() {
                const ctx = document.getElementById('gradeDistributionChart').getContext('2d');
                this.gradeDistributionChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: ['A (90-100%)', 'B (80-89%)', 'C (70-79%)', 'D (60-69%)', 'F (0-59%)'],
                        datasets: [{
                            label: 'Number of Students',
                            data: [0, 0, 0, 0, 0],
                            backgroundColor: [
                                'rgba(40, 167, 69, 0.8)',
                                'rgba(23, 162, 184, 0.8)',
                                'rgba(255, 193, 7, 0.8)',
                                'rgba(253, 126, 20, 0.8)',
                                'rgba(220, 53, 69, 0.8)'
                            ],
                            borderColor: [
                                'rgba(40, 167, 69, 1)',
                                'rgba(23, 162, 184, 1)',
                                'rgba(255, 193, 7, 1)',
                                'rgba(253, 126, 20, 1)',
                                'rgba(220, 53, 69, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });
            }

            updateGradeDistributionChart(distribution) {
                if (this.gradeDistributionChart && distribution) {
                    this.gradeDistributionChart.data.datasets[0].data = [
                        distribution.A || 0,
                        distribution.B || 0,
                        distribution.C || 0,
                        distribution.D || 0,
                        distribution.F || 0
                    ];
                    this.gradeDistributionChart.update();
                }
            }

            renderPagination(pagination) {
                if (!pagination) return;

                const container = document.getElementById('pagination');
                const totalPages = Math.ceil(pagination.totalCount / pagination.pageSize);
                
                if (totalPages <= 1) {
                    document.getElementById('paginationContainer').style.display = 'none';
                    return;
                }

                document.getElementById('paginationContainer').style.display = 'block';

                let html = '';
                
                // Previous button
                html += `
                    <li class="page-item ${pagination.currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${pagination.currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `;

                // Page numbers
                const startPage = Math.max(1, pagination.currentPage - 2);
                const endPage = Math.min(totalPages, pagination.currentPage + 2);

                if (startPage > 1) {
                    html += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
                    if (startPage > 2) {
                        html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                    }
                }

                for (let i = startPage; i <= endPage; i++) {
                    html += `
                        <li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `;
                }

                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                    }
                    html += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
                }

                // Next button
                html += `
                    <li class="page-item ${pagination.currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${pagination.currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `;

                container.innerHTML = html;

                // Bind pagination events
                container.querySelectorAll('a[data-page]').forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        const page = parseInt(e.target.closest('a').dataset.page);
                        if (page !== this.currentPage && page >= 1 && page <= totalPages) {
                            this.currentPage = page;
                            this.loadGrades();
                            this.updateUrlParam('page', page);
                        }
                    });
                });
            }

            toggleSelectAll(checked) {
                const checkboxes = document.querySelectorAll('.item-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = checked;
                    if (checked) {
                        this.selectedItems.add(checkbox.value);
                    } else {
                        this.selectedItems.delete(checkbox.value);
                    }
                });
                this.updateBulkActions();
            }

            updateBulkActions() {
                const bulkActions = document.getElementById('bulkActionsDropdown');
                const selectedCount = document.getElementById('selectedCount');
                
                if (this.selectedItems.size > 0) {
                    bulkActions.style.display = 'block';
                    selectedCount.style.display = 'block';
                    selectedCount.textContent = `${this.selectedItems.size} selected`;
                } else {
                    bulkActions.style.display = 'none';
                    selectedCount.style.display = 'none';
                }
            }

            async bulkApprove() {
                if (this.selectedItems.size === 0) return;
                
                try {
                    const promises = Array.from(this.selectedItems).map(id => 
                        apiUtils.patch(`${this.apiBaseUrl}/api/Grading/${id}/approve`)
                    );
                    await Promise.all(promises);
                    this.selectedItems.clear();
                    this.loadGrades();
                    this.showSuccess('Selected grades approved successfully');
                } catch (error) {
                    this.showError('Failed to approve selected grades');
                }
            }

            async bulkReview() {
                if (this.selectedItems.size === 0) return;
                
                try {
                    const promises = Array.from(this.selectedItems).map(id => 
                        apiUtils.patch(`${this.apiBaseUrl}/api/Grading/${id}/mark-review`)
                    );
                    await Promise.all(promises);
                    this.selectedItems.clear();
                    this.loadGrades();
                    this.showSuccess('Selected grades marked for review');
                } catch (error) {
                    this.showError('Failed to mark selected grades for review');
                }
            }

            openBulkFeedbackModal() {
                if (this.selectedItems.size === 0) return;
                
                const modal = new bootstrap.Modal(document.getElementById('bulkFeedbackModal'));
                modal.show();
            }

            async saveBulkFeedback() {
                const feedback = document.getElementById('bulkFeedbackInput').value.trim();
                const appendFeedback = document.getElementById('appendFeedbackCheckbox').checked;
                const notifyStudents = document.getElementById('notifyStudentsCheckbox').checked;
                
                if (!feedback) {
                    this.showError('Please enter feedback');
                    return;
                }

                try {
                    const promises = Array.from(this.selectedItems).map(id => 
                        apiUtils.post(`${this.apiBaseUrl}/api/Grading/${id}/feedback`, {
                            feedback: feedback,
                            append: appendFeedback,
                            notifyStudent: notifyStudents
                        })
                    );
                    
                    await Promise.all(promises);
                    this.selectedItems.clear();
                    this.loadGrades();
                    this.showSuccess('Bulk feedback added successfully');
                    
                    bootstrap.Modal.getInstance(document.getElementById('bulkFeedbackModal')).hide();
                    document.getElementById('bulkFeedbackForm').reset();
                } catch (error) {
                    this.showError('Failed to add bulk feedback');
                }
            }

            async bulkExport() {
                if (this.selectedItems.size === 0) return;
                
                try {
                    const ids = Array.from(this.selectedItems).join(',');
                    const response = await apiUtils.get(`${this.apiBaseUrl}/api/Grading/export?ids=${ids}`);
                    
                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `selected_grades_${new Date().toISOString().split('T')[0]}.xlsx`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        this.showSuccess('Selected grades exported successfully');
                    }
                } catch (error) {
                    this.showError('Failed to export selected grades');
                }
            }

            async bulkDelete() {
                if (this.selectedItems.size === 0) return;
                
                if (confirm(`Are you sure you want to delete ${this.selectedItems.size} selected grade(s)?`)) {
                    try {
                        const promises = Array.from(this.selectedItems).map(id => 
                            apiUtils.delete(`${this.apiBaseUrl}/api/Grading/${id}`)
                        );
                        await Promise.all(promises);
                        this.selectedItems.clear();
                        this.loadGrades();
                        this.showSuccess('Selected grades deleted successfully');
                    } catch (error) {
                        this.showError('Failed to delete selected grades');
                    }
                }
            }

            openAnalyticsModal() {
                const modal = new bootstrap.Modal(document.getElementById('analyticsModal'));
                modal.show();
                // Initialize additional analytics charts here
            }

            async exportGrades() {
                try {
                    const params = new URLSearchParams(window.location.search);
                    const response = await apiUtils.get(`${this.apiBaseUrl}/api/Grading/export?${params.toString()}`);
                    
                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `grades_${new Date().toISOString().split('T')[0]}.xlsx`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        this.showSuccess('Grades exported successfully');
                    }
                } catch (error) {
                    this.showError('Failed to export grades');
                }
            }

            updateUrlParam(key, value) {
                const url = new URL(window.location);
                url.searchParams.set(key, value);
                window.history.replaceState({}, '', url);
            }

            showSuccess(message) {
                // Implement toast notification
                console.log('Success:', message);
            }

            showError(message) {
                // Implement toast notification
                console.error('Error:', message);
            }
        }

        // Global functions
        async function deleteGrade(id) {
            if (confirm('Are you sure you want to delete this grade?')) {
                try {
                    const response = await apiUtils.delete(`${gradingManager.apiBaseUrl}/api/Grading/${id}`);
                    if (response.ok) {
                        gradingManager.loadGrades();
                        gradingManager.showSuccess('Grade deleted successfully');
                    } else {
                        throw new Error('Failed to delete grade');
                    }
                } catch (error) {
                    gradingManager.showError('Failed to delete grade');
                }
            }
        }

        // Initialize when DOM is ready
        let gradingManager;
        document.addEventListener('DOMContentLoaded', function() {
            gradingManager = new GradingManager();
        });
    </script>
}