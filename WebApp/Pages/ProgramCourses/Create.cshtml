@page
@model WebApp.Pages.ProgramCourses.CreateModel
@{
    ViewData["Title"] = "Create Program Course";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">Create New Program Course</h3>
                </div>
                <div class="card-body">
                    <form id="createProgramCourseForm">
                        <div class="mb-3">
                            <label for="programId" class="form-label">Program</label>
                            <select class="form-select" id="programId" name="programId" required>
                                <option value="">Select a program...</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="courseId" class="form-label">Course</label>
                            <select class="form-select" id="courseId" name="courseId" required>
                                <option value="">Select a course...</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="isCompulsory" class="form-label">Is Compulsory</label>
                            <select class="form-select" id="isCompulsory" name="isCompulsory">
                                <option value="true">Yes</option>
                                <option value="false">No</option>
                            </select>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a href="/ProgramCourses" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Back to List
                            </a>
                            <div class="btn-group" role="group">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Create
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
        
        async function loadPrograms() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/Program`);
                if (!response.ok) throw new Error('Failed to fetch programs');
                
                const programs = await response.json();
                const programSelect = document.getElementById('programId');
                
                programs.forEach(program => {
                    const option = document.createElement('option');
                    option.value = program.id;
                    option.textContent = program.name;
                    programSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error:', error);
                showAlert('Failed to load programs', 'danger');
            }
        }

        async function loadCourses() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/Course`);
                if (!response.ok) throw new Error('Failed to fetch courses');
                
                const courses = await response.json();
                console.log('Fetched courses:', courses);
                const courseSelect = document.getElementById('courseId');
                
                courseSelect.innerHTML = '<option value="">Select a course...</option>';

                if (Array.isArray(courses)) {
                    courses.forEach(course => {
                        if (course && typeof course.id !== 'undefined' && typeof course.courseName !== 'undefined') {
                            const option = document.createElement('option');
                            option.value = course.id;
                            option.textContent = course.courseName;
                            courseSelect.appendChild(option);
                        } else {
                            console.warn('Skipping invalid course item:', course);
                        }
                    });
                } else {
                    console.error('Error: Fetched courses data is not an array:', courses);
                    showAlert('Failed to load courses: Invalid data format', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('Failed to load courses', 'danger');
            }
        }
        
        document.getElementById('createProgramCourseForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const programCourseData = {
                programId: document.getElementById('programId').value,
                courseId: document.getElementById('courseId').value,
                isCompulsory: document.getElementById('isCompulsory').value === 'true'
            };

            try {
                const response = await fetch(`${apiBaseUrl}/api/ProgramCourse`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(programCourseData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to create program course');
                }

                showAlert('Program Course created successfully!', 'success');
                setTimeout(() => {
                    window.location.href = '/ProgramCourses';
                }, 1500);
            } catch (error) {
                console.error('Error:', error);
                showAlert(error.message || 'Failed to create program course', 'danger');
            }
        });

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            const container = document.querySelector('.container');
            container.insertBefore(alertDiv, container.firstChild);
            
            setTimeout(() => {
                alertDiv.remove();
            }, 3000);
        }

        // Load programs and courses when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            loadPrograms();
            loadCourses();
        });
    </script>
}
