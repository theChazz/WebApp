@page
@model WebApp.Pages.ProgramCourses.IndexModel
@{
    ViewData["Title"] = "Program Courses";
}

<div class="container mt-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">
                <i class="fas fa-link text-success me-2"></i>Program Courses
            </h2>
            <p class="text-muted mb-0">Manage which courses belong to which programs</p>
        </div>
        <a href="/ProgramCourses/Create" class="btn btn-success">
            <i class="fas fa-plus"></i> Add Course to Program
        </a>
    </div>

    <!-- Quick Stats -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-left-primary">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Relationships</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalRelationships">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-link fa-2x text-primary"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-success">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Compulsory Courses</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="compulsoryCount">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-success"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-warning">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Optional Courses</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="optionalCount">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-circle fa-2x text-warning"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Search Relationships</label>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search by program or course...">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Filter by Program</label>
                    <select class="form-select" id="programFilter">
                        <option value="">All Programs</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Filter by Course</label>
                    <select class="form-select" id="courseFilter">
                        <option value="">All Courses</option>
                    </select>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn btn-outline-primary w-100" onclick="applyFilters()">
                        <i class="fas fa-search"></i> Search & Filter
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Table View Toggle -->
    <div class="d-flex justify-content-end mb-3" style="position: sticky; top: 20px; z-index: 100;">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-info" id="gridViewBtn">
                <i class="fas fa-th"></i> Grid View
            </button>
            <button type="button" class="btn btn-outline-info active" id="listViewBtn">
                <i class="fas fa-list"></i> List View
            </button>
        </div>
    </div>

    <!-- Program Courses Grid (Hidden by default) -->
    <div class="row d-none" id="programCoursesGrid">
        <!-- Program courses will be loaded here as cards -->
    </div>

    <!-- List View (Default view - shown first) -->
    <div class="card" id="programCoursesTableView">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table">
                    <thead class="table-dark">
                        <tr>
                            <th>Program</th>
                        </tr>
                    </thead>
                    <tbody id="programCoursesTableBody">
                        <!-- Program courses will be loaded here grouped by program -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="alert" class="alert mt-3" style="display: none;"></div>
</div>

@section Scripts {
    <style>
        .program-header-row {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        .program-header-row:hover {
            background-color: #e3f2fd !important;
        }
        .program-course-row {
            background-color: #f8f9fa;
        }
        .program-course-row:hover {
            background-color: #e9ecef;
        }
        .program-course-row td:first-child {
            border-left: 3px solid #007bff;
        }
        .btn-group .btn {
            margin-right: 2px;
        }
        .table-primary {
            background-color: #e3f2fd;
        }
        .program-subheader-row {
            background-color: #f8f9fa !important;
            border-top: 2px solid #dee2e6;
            border-bottom: 1px solid #dee2e6;
        }
        .program-subheader-row td {
            padding: 8px 12px;
            font-weight: 600;
            color: #495057;
        }
    </style>

    <script>
        const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
        let allProgramCourses = [];
        let filteredProgramCourses = [];
        let currentView = 'list';

        async function loadProgramCourses() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/ProgramCourse`);
                if (!response.ok) throw new Error('Failed to fetch program courses');

                const data = await response.json();

                // Handle different response formats
                if (Array.isArray(data)) {
                    allProgramCourses = data;
                } else if (data.data && Array.isArray(data.data)) {
                    allProgramCourses = data.data;
                } else if (data.programCourses && Array.isArray(data.programCourses)) {
                    allProgramCourses = data.programCourses;
                } else {
                    allProgramCourses = [];
                }

                filteredProgramCourses = [...allProgramCourses];

                // Update statistics
                updateStatistics(allProgramCourses);

                // Load filters
                loadProgramsFilter(allProgramCourses);
                loadCoursesFilter(allProgramCourses);

                // Display program courses
                displayProgramCourses(filteredProgramCourses);

            } catch (error) {
                console.error('Error:', error);
                showAlert('Failed to load program courses', 'danger');
            }
        }


        function updateStatistics(programCourses) {
            // Total relationships
            document.getElementById('totalRelationships').textContent = programCourses.length;

            // Compulsory count
            const compulsoryCount = programCourses.filter(pc => pc.isCompulsory === true || pc.isCompulsory === 'true').length;
            document.getElementById('compulsoryCount').textContent = compulsoryCount;

            // Optional count
            const optionalCount = programCourses.filter(pc => pc.isCompulsory === false || pc.isCompulsory === 'false').length;
            document.getElementById('optionalCount').textContent = optionalCount;
        }

        function loadProgramsFilter(programCourses) {
            // Get unique programs by ID to avoid duplicates
            const uniqueProgramsMap = new Map();
            programCourses.forEach(pc => {
                if (pc.program && pc.program.id && pc.program.name) {
                    uniqueProgramsMap.set(pc.program.id, pc.program);
                }
            });
            const uniquePrograms = Array.from(uniqueProgramsMap.values());

            const programFilter = document.getElementById('programFilter');

            // Clear existing options except "All Programs"
            programFilter.innerHTML = '<option value="">All Programs</option>';

            uniquePrograms.forEach(program => {
                const option = document.createElement('option');
                option.value = program.id;
                option.textContent = program.name;
                programFilter.appendChild(option);
            });
        }

        function loadCoursesFilter(programCourses) {
            // Get unique courses by ID to avoid duplicates
            const uniqueCoursesMap = new Map();
            programCourses.forEach(pc => {
                if (pc.course && pc.course.id && pc.course.courseName) {
                    uniqueCoursesMap.set(pc.course.id, pc.course);
                }
            });
            const uniqueCourses = Array.from(uniqueCoursesMap.values());

            const courseFilter = document.getElementById('courseFilter');

            // Clear existing options except "All Courses"
            courseFilter.innerHTML = '<option value="">All Courses</option>';

            uniqueCourses.forEach(course => {
                const option = document.createElement('option');
                option.value = course.id;
                option.textContent = course.courseName;
                courseFilter.appendChild(option);
            });
        }

        function displayProgramCourses(programCourses) {
            // Display grid view
            displayGridView(programCourses);

            // Display table view
            displayTableView(programCourses);
        }

        function displayGridView(programCourses) {
            const grid = document.getElementById('programCoursesGrid');

            // Group program courses by program
            const groupedByProgram = programCourses.reduce((groups, pc) => {
                const programId = pc.program?.id || pc.programId || 'unknown';
                const programName = pc.program?.name || 'Unknown Program';

                if (!groups[programId]) {
                    groups[programId] = {
                        program: pc.program || { id: programId, name: programName },
                        courses: []
                    };
                }
                groups[programId].courses.push(pc);
                return groups;
            }, {});

            // Create HTML for grouped grid display
            const html = Object.values(groupedByProgram).map(programGroup => {
                const program = programGroup.program;
                const courses = programGroup.courses;
                const programCardId = `program-card-${program.id}`;

                return `
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-primary text-white">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">
                                            <i class="fas fa-graduation-cap me-2"></i>
                                            ${escapeHtml(program.name)}
                                        </h6>
                                        <small>${escapeHtml(program.code || 'N/A')}</small>
                                    </div>
                                    <span class="badge bg-light text-dark">${courses.length} course${courses.length !== 1 ? 's' : ''}</span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <strong>Courses:</strong>
                                    <div class="mt-2">
                                        ${courses.map(pc => `
                                            <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded">
                                                <div class="flex-grow-1">
                                                    <div class="fw-bold">${escapeHtml(pc.course?.courseName || 'N/A')}</div>
                                                    <small class="text-muted">${escapeHtml(pc.course?.category || 'Uncategorized')}</small>
                                                </div>
                                                <div class="d-flex align-items-center">
                                                    <span class="badge ${pc.isCompulsory ? 'bg-success me-2' : 'bg-warning me-2'}">
                                                        ${pc.isCompulsory ? 'Compulsory' : 'Optional'}
                                                    </span>
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <a href="/ProgramCourses/Details/${pc.id}" class="btn btn-outline-info btn-sm" title="View">
                                                            <i class="fas fa-eye"></i>
                                                        </a>
                                                        <a href="/ProgramCourses/Edit/${pc.id}" class="btn btn-outline-primary btn-sm" title="Edit">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                        <button class="btn btn-outline-danger btn-sm" onclick="deleteProgramCourse(${pc.id})" title="Delete">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        `).join('')}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>`;
            }).join('');

            grid.innerHTML = html;
        }

        function displayTableView(programCourses) {
            const tableBody = document.getElementById('programCoursesTableBody');

            // Group program courses by program
            const groupedByProgram = programCourses.reduce((groups, pc) => {
                const programId = pc.program?.id || pc.programId || 'unknown';
                const programName = pc.program?.name || 'Unknown Program';

                if (!groups[programId]) {
                    groups[programId] = {
                        program: pc.program || { id: programId, name: programName },
                        courses: []
                    };
                }
                groups[programId].courses.push(pc);
                return groups;
            }, {});

            // Create HTML for grouped display
            const html = Object.values(groupedByProgram).map(programGroup => {
                const program = programGroup.program;
                const courses = programGroup.courses;
                const programRowId = `program-${program.id}`;

                // Main program row
                let programHtml = `
                    <tr class="table-primary program-header-row" onclick="toggleProgramCourses('${programRowId}')">
                        <td>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-graduation-cap text-primary me-2"></i>
                                <strong>${escapeHtml(program.name)}</strong>
                                <small class="text-muted ms-2">(${escapeHtml(program.code || 'N/A')})</small>
                                <span class="badge bg-primary ms-2">${courses.length} course${courses.length !== 1 ? 's' : ''}</span>
                            </div>
                        </td>
                    </tr>

                    <tr class="table-secondary program-subheader-row ${programRowId}" style="display: none;">
                        <td>
                            <div class="row">
                                <div class="col-md-5"><strong>Course</strong></div>
                                <div class="col-md-3"><strong>Compulsory Status</strong></div>
                                <div class="col-md-3"><strong>Actions</strong></div>
                                <div class="col-md-1"></div>
                            </div>
                        </td>
                    </tr>`;

                // Course rows (initially hidden)
                const courseRows = courses.map((pc, index) => `
                    <tr class="program-course-row ${programRowId}" style="display: none;">
                        <td>
                            <div class="row align-items-center">
                                <div class="col-md-5">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-book text-muted me-2"></i>
                                        ${escapeHtml(pc.course?.courseName || 'N/A')}
                                        <small class="text-muted ms-2">${escapeHtml(pc.course?.category || 'Uncategorized')}</small>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <span class="badge ${pc.isCompulsory ? 'bg-success' : 'bg-warning'}">
                                        <i class="fas ${pc.isCompulsory ? 'fa-check-circle' : 'fa-circle'} me-1"></i>
                                        ${pc.isCompulsory ? 'Compulsory' : 'Optional'}
                                    </span>
                                </div>
                                <div class="col-md-3">
                                    <div class="btn-group" role="group">
                                        <a href="/ProgramCourses/Details/${pc.id}" class="btn btn-info btn-sm" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="/ProgramCourses/Edit/${pc.id}" class="btn btn-primary btn-sm" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="btn btn-danger btn-sm" onclick="deleteProgramCourse(${pc.id})" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="col-md-1"></div>
                            </div>
                        </td>
                    </tr>`).join('');

                return programHtml + courseRows;
            }).join('');

            tableBody.innerHTML = html;
        }

        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const programFilter = document.getElementById('programFilter').value;
            const courseFilter = document.getElementById('courseFilter').value;

            filteredProgramCourses = allProgramCourses.filter(pc => {
                const programName = (pc.program?.name || '').toLowerCase();
                const courseName = (pc.course?.courseName || '').toLowerCase();
                const programCode = (pc.program?.code || '').toLowerCase();

                const matchesSearch = programName.includes(searchTerm) ||
                                    courseName.includes(searchTerm) ||
                                    programCode.includes(searchTerm);

                const matchesProgram = !programFilter || pc.program?.id == programFilter;
                const matchesCourse = !courseFilter || pc.course?.id == courseFilter;

                return matchesSearch && matchesProgram && matchesCourse;
            });

            displayProgramCourses(filteredProgramCourses);
            updateStatistics(filteredProgramCourses);
        }

        function toggleProgramCourses(programRowId) {
            const courseRows = document.querySelectorAll(`.program-course-row.${programRowId}`);
            const subheaderRow = document.querySelector(`.program-subheader-row.${programRowId}`);
            const chevronIcon = document.getElementById(`chevron-${programRowId}`);
            const toggleText = document.getElementById(`toggle-text-${programRowId}`);

            const isVisible = courseRows.length > 0 && courseRows[0].style.display !== 'none';

            // Toggle course rows
            courseRows.forEach(row => {
                row.style.display = isVisible ? 'none' : 'table-row';
            });

            // Toggle subheader row
            if (subheaderRow) {
                subheaderRow.style.display = isVisible ? 'none' : 'table-row';
            }

            if (chevronIcon) {
                chevronIcon.className = isVisible ? 'fas fa-chevron-down' : 'fas fa-chevron-up';
            }

            if (toggleText) {
                toggleText.textContent = isVisible ? 'Show Courses' : 'Hide Courses';
            }
        }

        function toggleView(viewType) {
            const gridViewBtn = document.getElementById('gridViewBtn');
            const listViewBtn = document.getElementById('listViewBtn');
            const grid = document.getElementById('programCoursesGrid');
            const tableView = document.getElementById('programCoursesTableView');

            if (viewType === 'grid') {
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
                grid.classList.remove('d-none');
                tableView.classList.add('d-none');
            } else {
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
                grid.classList.add('d-none');
                tableView.classList.remove('d-none');
            }
        }

        async function deleteProgramCourse(id) {
            if (!confirm('Are you sure you want to delete this program course relationship?')) {
                return;
            }

            try {
                const response = await fetch(`${apiBaseUrl}/api/ProgramCourse/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    let errorMsg = 'Failed to delete program course relationship';
                    try {
                        const errorData = await response.json();
                        errorMsg = errorData.message || errorData.title || errorMsg;
                    } catch (e) { /* Ignore if response body is not JSON */ }
                    throw new Error(errorMsg);
                }

                const responseText = await response.text();
                if (response.status === 204 || !responseText) {
                    showAlert('Program course relationship deleted successfully!', 'success');
                } else {
                    try {
                        const result = JSON.parse(responseText);
                        showAlert(result.message || 'Program course relationship deleted successfully!', 'success');
                    } catch (e) {
                        showAlert('Program course relationship deleted successfully! (non-JSON response)', 'success');
                    }
                }

                // Reload program courses and refresh unassigned courses
                loadProgramCourses();
            } catch (error) {
                console.error('Error deleting program course:', error);
                showAlert(error.message || 'Failed to delete program course relationship', 'danger');
            }
        }

        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type} mt-3`;
            alert.textContent = message;
            alert.style.display = 'block';

            // Auto-hide after 5 seconds for success/info, keep error visible
            if (type === 'success' || type === 'info') {
                setTimeout(() => {
                    alert.style.display = 'none';
                }, 5000);
            }
        }

        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            loadProgramCourses();

            // Set default view to List view
            toggleView('list');

            // Search input event
            document.getElementById('searchInput').addEventListener('input', function() {
                clearTimeout(this.searchTimeout);
                this.searchTimeout = setTimeout(applyFilters, 300);
            });

            // Filter events
            document.getElementById('programFilter').addEventListener('change', applyFilters);
            document.getElementById('courseFilter').addEventListener('change', applyFilters);

            // View toggle events
            document.getElementById('gridViewBtn').addEventListener('click', function() {
                toggleView('grid');
            });

            document.getElementById('listViewBtn').addEventListener('click', function() {
                toggleView('list');
            });
        });
    </script>
}
