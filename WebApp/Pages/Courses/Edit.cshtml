@page "{id:int}"
@model WebApp.Pages.Courses.EditModel
@{
    ViewData["Title"] = "Edit Course";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">Edit Course</h3>
                </div>
                <div class="card-body">
                    <form id="editCourseForm">
                        <input type="hidden" id="courseId">
                        
                        <div class="mb-3">
                            <label for="courseName" class="form-label">Course Name</label>
                            <input type="text" class="form-control" id="courseName" name="courseName" required maxlength="255">
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                        </div>

                        <div class="mb-3">
                            <label for="category" class="form-label">Category</label>
                            <input type="text" class="form-control" id="category" name="category">
                        </div>

                        <div class="mb-3">
                            <label for="difficulty" class="form-label">Difficulty</label>
                            <select class="form-select" id="difficulty" name="difficulty">
                                <option value="">Select Difficulty</option>
                                <option value="Beginner">Beginner</option>
                                <option value="Intermediate">Intermediate</option>
                                <option value="Advanced">Advanced</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="syllabus" class="form-label">Syllabus</label>
                            <textarea class="form-control" id="syllabus" name="syllabus" rows="4"></textarea>
                        </div>

                        <div class="mb-3">
                            <label for="prerequisites" class="form-label">Prerequisites</label>
                            <textarea class="form-control" id="prerequisites" name="prerequisites" rows="2"></textarea>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a href="/Courses" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Back to List
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            <div id="alert" class="alert mt-3" style="display: none;"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/apiConfig.js"></script>
    <script src="~/js/debug.js"></script>
    <script>
        // Use consistent API base URL configuration
        const apiBaseUrl = (typeof apiConfig !== 'undefined' && apiConfig.baseUrl) ?
            apiConfig.baseUrl :
            '@Configuration["ApiSettings:BaseUrl"]';

        const courseId = '@Model.Id';

        console.log('API Base URL:', apiBaseUrl);
        console.log('Course ID:', courseId);

        // Debug checks
        window.LMSDebug.checkElements(['courseId', 'courseName', 'description', 'category', 'difficulty', 'syllabus', 'prerequisites']);
        window.LMSDebug.log('Course edit page initialized');

        async function loadCourse() {
            try {
                console.log('Loading course from:', `${apiBaseUrl}/api/Course/${courseId}`);

                const response = await fetch(`${apiBaseUrl}/api/Course/${courseId}`);
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Response status:', response.status, 'Response:', errorText);
                    throw new Error(`Failed to fetch course details: ${response.status} ${response.statusText}`);
                }

                const course = await response.json();
                console.log('Course data received:', course);

                // Ensure all required elements exist before setting values
                const fields = ['courseId', 'courseName', 'description', 'category', 'difficulty', 'syllabus', 'prerequisites'];
                fields.forEach(field => {
                    const element = document.getElementById(field);
                    if (!element) {
                        console.warn(`Element with ID '${field}' not found`);
                    }
                });

                document.getElementById('courseId').value = course.id || '';
                document.getElementById('courseName').value = course.courseName || '';
                document.getElementById('description').value = course.description || '';
                document.getElementById('category').value = course.category || '';
                document.getElementById('difficulty').value = course.difficulty || '';
                document.getElementById('syllabus').value = course.syllabus || '';
                document.getElementById('prerequisites').value = course.prerequisites || '';

                console.log('Course form populated successfully');
            } catch (error) {
                console.error('Error loading course:', error);
                showAlert(error.message || 'Failed to load course details', 'danger');
            }
        }

        document.getElementById('editCourseForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const courseData = {
                id: parseInt(document.getElementById('courseId').value) || 0,
                courseName: document.getElementById('courseName').value.trim(),
                description: document.getElementById('description').value.trim(),
                category: document.getElementById('category').value.trim(),
                difficulty: document.getElementById('difficulty').value,
                syllabus: document.getElementById('syllabus').value.trim(),
                prerequisites: document.getElementById('prerequisites').value.trim()
            };

            console.log('Submitting course data:', courseData);

            try {
                const response = await fetch(`${apiBaseUrl}/api/Course/${courseId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(courseData)
                });

                console.log('Update response status:', response.status);

                if (!response.ok) {
                    let errorMessage = 'Failed to update course';
                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.message || errorMessage;
                    } catch (parseError) {
                        console.error('Error parsing error response:', parseError);
                    }
                    throw new Error(errorMessage);
                }

                const result = await response.json();
                console.log('Update successful:', result);

                showAlert('Course updated successfully!', 'success');
                setTimeout(() => {
                    window.location.href = '/Courses';
                }, 1500);
            } catch (error) {
                console.error('Error updating course:', error);
                showAlert(error.message || 'Failed to update course', 'danger');
            }
        });

        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type} mt-3`;
            alert.textContent = message;
            alert.style.display = 'block';
        }

        // Load course data when the page loads
        loadCourse();
    </script>
} 