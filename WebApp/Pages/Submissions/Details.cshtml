@page
@model WebApp.Pages.Submissions.DetailsModel
@{
    ViewData["Title"] = "Submission Details";
    Layout = "_AdminLayout";
}

<div class="container-fluid">
    <!-- Loading State -->
    <div class="text-center py-5" id="loadingState">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading submission...</span>
        </div>
        <p class="text-muted mt-2">Loading submission details...</p>
    </div>

    <!-- Main Content -->
    <div id="contentArea" style="display: none;">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="fw-bold mb-1">
                    <i class="fas fa-paper-plane text-primary me-2"></i>
                    <span id="submissionTitle">Submission Details</span>
                </h2>
                <p class="text-muted mb-0" id="submissionSubtitle">View submission information and files</p>
            </div>
            <div class="d-flex gap-2">
                <a href="/Submissions" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i>
                    Back to List
                </a>
                <button type="button" class="btn btn-outline-primary" id="downloadBtn" style="display: none;">
                    <i class="fas fa-download me-1"></i>
                    Download Files
                </button>
                <button type="button" class="btn btn-primary" id="gradeBtn">
                    <i class="fas fa-star me-1"></i>
                    Grade Submission
                </button>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" id="editLink">
                            <i class="fas fa-edit me-2"></i>Edit Submission
                        </a></li>
                        <li><a class="dropdown-item" href="#" id="duplicateBtn">
                            <i class="fas fa-copy me-2"></i>Duplicate
                        </a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item text-danger" href="#" id="deleteBtn">
                            <i class="fas fa-trash me-2"></i>Delete
                        </a></li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-8">
                <!-- Submission Overview -->
                <div class="card mb-4">
                    <div class="card-header bg-white">
                        <h6 class="mb-0 fw-semibold">
                            <i class="fas fa-info-circle me-2"></i>
                            Submission Overview
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row g-3" id="submissionOverview">
                            <!-- Populated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Submission Content -->
                <div class="card mb-4" id="submissionContentCard" style="display: none;">
                    <div class="card-header bg-white">
                        <h6 class="mb-0 fw-semibold">
                            <i class="fas fa-file-text me-2"></i>
                            Submission Content
                        </h6>
                    </div>
                    <div class="card-body">
                        <div id="submissionContent" class="border rounded p-3 bg-light">
                            <!-- Populated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Files -->
                <div class="card mb-4" id="filesCard" style="display: none;">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center">
                        <h6 class="mb-0 fw-semibold">
                            <i class="fas fa-paperclip me-2"></i>
                            Attached Files
                        </h6>
                        <button class="btn btn-sm btn-outline-primary" id="downloadAllBtn">
                            <i class="fas fa-download me-1"></i>
                            Download All
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="filesList" class="list-group list-group-flush">
                            <!-- Populated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Grading Section -->
                <div class="card mb-4" id="gradingCard">
                    <div class="card-header bg-white">
                        <h6 class="mb-0 fw-semibold">
                            <i class="fas fa-star me-2"></i>
                            Grading & Feedback
                        </h6>
                    </div>
                    <div class="card-body" id="gradingContent">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Notes -->
                <div class="card mb-4" id="notesCard" style="display: none;">
                    <div class="card-header bg-white">
                        <h6 class="mb-0 fw-semibold">
                            <i class="fas fa-sticky-note me-2"></i>
                            Notes
                        </h6>
                    </div>
                    <div class="card-body">
                        <div id="notesContent">
                            <!-- Populated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <!-- Student Information -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-user me-2"></i>
                            Student Information
                        </h6>
                    </div>
                    <div class="card-body" id="studentInfo">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Assessment Information -->
                <div class="card mb-4">
                    <div class="card-header bg-info text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-clipboard-list me-2"></i>
                            Assessment Details
                        </h6>
                    </div>
                    <div class="card-body" id="assessmentInfo">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Submission Timeline -->
                <div class="card mb-4">
                    <div class="card-header bg-secondary text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-history me-2"></i>
                            Timeline
                        </h6>
                    </div>
                    <div class="card-body" id="timeline">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h6 class="mb-0">
                            <i class="fas fa-bolt me-2"></i>
                            Quick Actions
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary btn-sm" id="quickGradeBtn">
                                <i class="fas fa-star me-1"></i>
                                Quick Grade
                            </button>
                            <button class="btn btn-outline-info btn-sm" id="addFeedbackBtn">
                                <i class="fas fa-comment me-1"></i>
                                Add Feedback
                            </button>
                            <button class="btn btn-outline-success btn-sm" id="markReviewedBtn">
                                <i class="fas fa-check me-1"></i>
                                Mark as Reviewed
                            </button>
                            <button class="btn btn-outline-warning btn-sm" id="requestRevisionBtn">
                                <i class="fas fa-redo me-1"></i>
                                Request Revision
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Error State -->
    <div class="text-center py-5" id="errorState" style="display: none;">
        <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
        <h5 class="text-muted">Submission Not Found</h5>
        <p class="text-muted">The requested submission could not be found or you don't have permission to view it.</p>
        <a href="/Submissions" class="btn btn-primary">
            <i class="fas fa-arrow-left me-1"></i>
            Back to Submissions
        </a>
    </div>
</div>

<!-- Quick Grade Modal -->
<div class="modal fade" id="quickGradeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-star text-warning me-2"></i>
                    Quick Grade
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="quickGradeForm">
                    <div class="mb-3">
                        <label class="form-label">Grade (0-100)</label>
                        <input type="number" class="form-control" id="quickGradeInput" min="0" max="100" step="0.1" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Quick Feedback</label>
                        <textarea class="form-control" id="quickFeedbackInput" rows="3" placeholder="Optional feedback..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveQuickGradeBtn">
                    <i class="fas fa-save me-1"></i>
                    Save Grade
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add Feedback Modal -->
<div class="modal fade" id="feedbackModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-comment text-info me-2"></i>
                    Add Feedback
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="feedbackForm">
                    <div class="mb-3">
                        <label class="form-label">Feedback</label>
                        <textarea class="form-control" id="feedbackInput" rows="6" placeholder="Enter your feedback..." required></textarea>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="notifyStudentCheckbox" checked>
                            <label class="form-check-label" for="notifyStudentCheckbox">
                                Notify student via email
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveFeedbackBtn">
                    <i class="fas fa-save me-1"></i>
                    Add Feedback
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        class SubmissionDetailsViewer {
            constructor() {
                this.apiBaseUrl = '@Model.ApiBaseUrl';
                this.submissionId = @Model.Id;
                this.submission = null;
                this.init();
            }

            init() {
                this.bindEvents();
                this.loadSubmission();
            }

            bindEvents() {
                // Download buttons
                document.getElementById('downloadBtn').addEventListener('click', () => this.downloadFiles());
                document.getElementById('downloadAllBtn').addEventListener('click', () => this.downloadAllFiles());

                // Action buttons
                document.getElementById('gradeBtn').addEventListener('click', () => this.openGradingPage());
                document.getElementById('deleteBtn').addEventListener('click', () => this.deleteSubmission());
                document.getElementById('duplicateBtn').addEventListener('click', () => this.duplicateSubmission());

                // Quick actions
                document.getElementById('quickGradeBtn').addEventListener('click', () => this.openQuickGradeModal());
                document.getElementById('addFeedbackBtn').addEventListener('click', () => this.openFeedbackModal());
                document.getElementById('markReviewedBtn').addEventListener('click', () => this.markAsReviewed());
                document.getElementById('requestRevisionBtn').addEventListener('click', () => this.requestRevision());

                // Modal actions
                document.getElementById('saveQuickGradeBtn').addEventListener('click', () => this.saveQuickGrade());
                document.getElementById('saveFeedbackBtn').addEventListener('click', () => this.saveFeedback());
            }

            async loadSubmission() {
                try {
                    document.getElementById('loadingState').style.display = 'block';
                    document.getElementById('contentArea').style.display = 'none';
                    document.getElementById('errorState').style.display = 'none';

                    const response = await apiUtils.get(`${this.apiBaseUrl}/api/Submissions/${this.submissionId}`);
                    
                    if (response.ok) {
                        this.submission = await response.json();
                        this.renderSubmission();
                        document.getElementById('contentArea').style.display = 'block';
                    } else if (response.status === 404) {
                        document.getElementById('errorState').style.display = 'block';
                    } else {
                        throw new Error('Failed to load submission');
                    }
                } catch (error) {
                    console.error('Error loading submission:', error);
                    document.getElementById('errorState').style.display = 'block';
                } finally {
                    document.getElementById('loadingState').style.display = 'none';
                }
            }

            renderSubmission() {
                this.updatePageTitle();
                this.renderOverview();
                this.renderContent();
                this.renderFiles();
                this.renderGrading();
                this.renderNotes();
                this.renderStudentInfo();
                this.renderAssessmentInfo();
                this.renderTimeline();
                this.updateActionButtons();
            }

            updatePageTitle() {
                const title = `${this.submission.student?.firstName} ${this.submission.student?.lastName} - ${this.submission.assessment?.title}`;
                const subtitle = `Submitted on ${this.formatDate(this.submission.submittedAt)}`;
                
                document.getElementById('submissionTitle').textContent = title;
                document.getElementById('submissionSubtitle').textContent = subtitle;
                document.title = `Submission Details - ${title}`;
            }

            renderOverview() {
                const container = document.getElementById('submissionOverview');
                const isLate = new Date(this.submission.submittedAt) > new Date(this.submission.assessment?.dueDate);
                
                container.innerHTML = `
                    <div class="col-md-4">
                        <div class="text-center p-3 border rounded">
                            <div class="h4 mb-1 text-${this.getSubmissionStatusColor(this.submission.submissionStatus)}">
                                <i class="fas ${this.getSubmissionStatusIcon(this.submission.submissionStatus)} me-1"></i>
                                ${this.submission.submissionStatus}
                            </div>
                            <small class="text-muted">Submission Status</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="text-center p-3 border rounded">
                            <div class="h4 mb-1 text-${this.getGradingStatusColor(this.submission.gradingStatus)}">
                                <i class="fas ${this.getGradingStatusIcon(this.submission.gradingStatus)} me-1"></i>
                                ${this.submission.gradingStatus}
                            </div>
                            <small class="text-muted">Grading Status</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="text-center p-3 border rounded">
                            <div class="h4 mb-1 ${this.submission.grade !== null ? 
                                `text-${this.submission.grade >= 70 ? 'success' : this.submission.grade >= 50 ? 'warning' : 'danger'}` : 
                                'text-muted'
                            }">
                                ${this.submission.grade !== null ? `${this.submission.grade}%` : 'Not Graded'}
                            </div>
                            <small class="text-muted">Grade</small>
                        </div>
                    </div>
                    ${isLate ? `
                        <div class="col-12">
                            <div class="alert alert-warning mb-0">
                                <i class="fas fa-clock me-2"></i>
                                This submission was submitted late.
                            </div>
                        </div>
                    ` : ''}
                `;
            }

            renderContent() {
                const card = document.getElementById('submissionContentCard');
                const container = document.getElementById('submissionContent');
                
                if (this.submission.submissionText && this.submission.submissionText.trim()) {
                    container.innerHTML = this.submission.submissionText.replace(/\n/g, '<br>');
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            }

            renderFiles() {
                const card = document.getElementById('filesCard');
                const container = document.getElementById('filesList');
                
                if (this.submission.files && this.submission.files.length > 0) {
                    container.innerHTML = this.submission.files.map(file => `
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <i class="${this.getFileIcon(file.contentType)} me-3"></i>
                                <div>
                                    <div class="fw-semibold">${file.originalFileName}</div>
                                    <small class="text-muted">
                                        ${this.formatFileSize(file.fileSize)} • 
                                        Uploaded ${this.formatDate(file.uploadedAt)}
                                    </small>
                                </div>
                            </div>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" onclick="downloadFile(${file.id})">
                                    <i class="fas fa-download"></i>
                                </button>
                                <button class="btn btn-outline-info" onclick="previewFile(${file.id})">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                    `).join('');
                    
                    card.style.display = 'block';
                    document.getElementById('downloadBtn').style.display = 'block';
                } else {
                    card.style.display = 'none';
                    document.getElementById('downloadBtn').style.display = 'none';
                }
            }

            renderGrading() {
                const container = document.getElementById('gradingContent');
                
                if (this.submission.grade !== null || this.submission.feedback) {
                    container.innerHTML = `
                        <div class="row g-3">
                            ${this.submission.grade !== null ? `
                                <div class="col-md-6">
                                    <div class="card bg-light">
                                        <div class="card-body text-center">
                                            <h3 class="text-${this.submission.grade >= 70 ? 'success' : this.submission.grade >= 50 ? 'warning' : 'danger'}">
                                                ${this.submission.grade}%
                                            </h3>
                                            <small class="text-muted">Final Grade</small>
                                        </div>
                                    </div>
                                </div>
                            ` : ''}
                            ${this.submission.gradedAt ? `
                                <div class="col-md-6">
                                    <div class="card bg-light">
                                        <div class="card-body text-center">
                                            <div class="fw-semibold">${this.formatDate(this.submission.gradedAt)}</div>
                                            <small class="text-muted">Graded On</small>
                                        </div>
                                    </div>
                                </div>
                            ` : ''}
                            ${this.submission.feedback ? `
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-header bg-info text-white">
                                            <h6 class="mb-0">
                                                <i class="fas fa-comment me-2"></i>
                                                Instructor Feedback
                                            </h6>
                                        </div>
                                        <div class="card-body">
                                            ${this.submission.feedback.replace(/\n/g, '<br>')}
                                        </div>
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    `;
                } else {
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-star fa-2x text-muted mb-2"></i>
                            <p class="text-muted mb-0">This submission has not been graded yet.</p>
                        </div>
                    `;
                }
            }

            renderNotes() {
                const card = document.getElementById('notesCard');
                const container = document.getElementById('notesContent');
                
                if (this.submission.notes && this.submission.notes.trim()) {
                    container.innerHTML = this.submission.notes.replace(/\n/g, '<br>');
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            }

            renderStudentInfo() {
                const container = document.getElementById('studentInfo');
                const student = this.submission.student;
                
                container.innerHTML = `
                    <div class="d-flex align-items-center mb-3">
                        <div class="avatar avatar-lg bg-primary text-white rounded-circle me-3">
                            ${student.firstName.charAt(0)}${student.lastName.charAt(0)}
                        </div>
                        <div>
                            <h6 class="mb-1">${student.firstName} ${student.lastName}</h6>
                            <small class="text-muted">${student.email}</small>
                        </div>
                    </div>
                    <div class="mb-2">
                        <small class="text-muted">Student ID:</small>
                        <div class="fw-semibold">${student.id}</div>
                    </div>
                    ${student.program ? `
                        <div class="mb-2">
                            <small class="text-muted">Program:</small>
                            <div class="fw-semibold">${student.program}</div>
                        </div>
                    ` : ''}
                    <div class="mt-3">
                        <a href="/Users/Details/${student.id}" class="btn btn-sm btn-outline-primary" target="_blank">
                            <i class="fas fa-user me-1"></i>
                            View Profile
                        </a>
                    </div>
                `;
            }

            renderAssessmentInfo() {
                const container = document.getElementById('assessmentInfo');
                const assessment = this.submission.assessment;
                
                container.innerHTML = `
                    <div class="mb-2">
                        <small class="text-muted">Title:</small>
                        <div class="fw-semibold">${assessment.title}</div>
                    </div>
                    <div class="mb-2">
                        <small class="text-muted">Course:</small>
                        <div class="fw-semibold">${assessment.course?.title}</div>
                    </div>
                    <div class="mb-2">
                        <small class="text-muted">Type:</small>
                        <div class="fw-semibold">${assessment.assessmentType}</div>
                    </div>
                    <div class="mb-2">
                        <small class="text-muted">Total Points:</small>
                        <div class="fw-semibold">${assessment.totalPoints}</div>
                    </div>
                    <div class="mb-2">
                        <small class="text-muted">Due Date:</small>
                        <div class="fw-semibold">${this.formatDate(assessment.dueDate)}</div>
                    </div>
                    <div class="mt-3">
                        <a href="/Assessments/Details/${assessment.id}" class="btn btn-sm btn-outline-info" target="_blank">
                            <i class="fas fa-clipboard-list me-1"></i>
                            View Assessment
                        </a>
                    </div>
                `;
            }

            renderTimeline() {
                const container = document.getElementById('timeline');
                const events = [
                    {
                        date: this.submission.createdAt,
                        event: 'Submission Created',
                        icon: 'fas fa-plus-circle',
                        color: 'primary'
                    },
                    {
                        date: this.submission.submittedAt,
                        event: 'Submitted',
                        icon: 'fas fa-paper-plane',
                        color: 'success'
                    }
                ];

                if (this.submission.gradedAt) {
                    events.push({
                        date: this.submission.gradedAt,
                        event: 'Graded',
                        icon: 'fas fa-star',
                        color: 'warning'
                    });
                }

                container.innerHTML = events.map(event => `
                    <div class="d-flex align-items-center mb-2">
                        <div class="flex-shrink-0 me-2">
                            <i class="${event.icon} text-${event.color}"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="fw-semibold">${event.event}</div>
                            <small class="text-muted">${this.formatDate(event.date)}</small>
                        </div>
                    </div>
                `).join('');
            }

            updateActionButtons() {
                const editLink = document.getElementById('editLink');
                editLink.href = `/Submissions/Edit/${this.submissionId}`;
            }

            getSubmissionStatusColor(status) {
                const colors = {
                    'Draft': 'secondary',
                    'Submitted': 'primary',
                    'Late': 'warning',
                    'Resubmitted': 'info'
                };
                return colors[status] || 'secondary';
            }

            getSubmissionStatusIcon(status) {
                const icons = {
                    'Draft': 'fa-edit',
                    'Submitted': 'fa-paper-plane',
                    'Late': 'fa-clock',
                    'Resubmitted': 'fa-redo'
                };
                return icons[status] || 'fa-file';
            }

            getGradingStatusColor(status) {
                const colors = {
                    'NotGraded': 'secondary',
                    'InProgress': 'warning',
                    'Graded': 'success',
                    'NeedsReview': 'danger'
                };
                return colors[status] || 'secondary';
            }

            getGradingStatusIcon(status) {
                const icons = {
                    'NotGraded': 'fa-hourglass',
                    'InProgress': 'fa-spinner',
                    'Graded': 'fa-check-circle',
                    'NeedsReview': 'fa-exclamation-triangle'
                };
                return icons[status] || 'fa-question';
            }

            getFileIcon(mimeType) {
                if (mimeType?.includes('pdf')) return 'fas fa-file-pdf text-danger';
                if (mimeType?.includes('word') || mimeType?.includes('msword')) return 'fas fa-file-word text-primary';
                if (mimeType?.includes('text')) return 'fas fa-file-alt text-secondary';
                if (mimeType?.includes('image')) return 'fas fa-file-image text-success';
                if (mimeType?.includes('zip') || mimeType?.includes('archive')) return 'fas fa-file-archive text-warning';
                return 'fas fa-file text-muted';
            }

            formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            formatDate(dateString) {
                if (!dateString) return 'N/A';
                return new Date(dateString).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }

            openGradingPage() {
                window.open(`/Grading/Create?submissionId=${this.submissionId}`, '_blank');
            }

            openQuickGradeModal() {
                const modal = new bootstrap.Modal(document.getElementById('quickGradeModal'));
                if (this.submission.grade !== null) {
                    document.getElementById('quickGradeInput').value = this.submission.grade;
                }
                modal.show();
            }

            openFeedbackModal() {
                const modal = new bootstrap.Modal(document.getElementById('feedbackModal'));
                modal.show();
            }

            async saveQuickGrade() {
                try {
                    const grade = parseFloat(document.getElementById('quickGradeInput').value);
                    const feedback = document.getElementById('quickFeedbackInput').value;
                    
                    if (isNaN(grade) || grade < 0 || grade > 100) {
                        this.showError('Please enter a valid grade between 0 and 100');
                        return;
                    }

                    const gradeData = {
                        submissionId: this.submissionId,
                        grade: grade,
                        feedback: feedback || null,
                        gradingStatus: 'Graded'
                    };

                    const response = await apiUtils.post(`${this.apiBaseUrl}/api/Grading`, gradeData);
                    
                    if (response.ok) {
                        this.showSuccess('Grade saved successfully');
                        bootstrap.Modal.getInstance(document.getElementById('quickGradeModal')).hide();
                        this.loadSubmission(); // Reload to show updated grade
                    } else {
                        throw new Error('Failed to save grade');
                    }
                } catch (error) {
                    console.error('Error saving grade:', error);
                    this.showError('Failed to save grade');
                }
            }

            async saveFeedback() {
                try {
                    const feedback = document.getElementById('feedbackInput').value.trim();
                    
                    if (!feedback) {
                        this.showError('Please enter feedback');
                        return;
                    }

                    const feedbackData = {
                        submissionId: this.submissionId,
                        feedback: feedback,
                        notifyStudent: document.getElementById('notifyStudentCheckbox').checked
                    };

                    const response = await apiUtils.post(`${this.apiBaseUrl}/api/Submissions/${this.submissionId}/feedback`, feedbackData);
                    
                    if (response.ok) {
                        this.showSuccess('Feedback added successfully');
                        bootstrap.Modal.getInstance(document.getElementById('feedbackModal')).hide();
                        this.loadSubmission(); // Reload to show updated feedback
                    } else {
                        throw new Error('Failed to add feedback');
                    }
                } catch (error) {
                    console.error('Error adding feedback:', error);
                    this.showError('Failed to add feedback');
                }
            }

            async markAsReviewed() {
                try {
                    const response = await apiUtils.patch(`${this.apiBaseUrl}/api/Submissions/${this.submissionId}/mark-reviewed`);
                    
                    if (response.ok) {
                        this.showSuccess('Submission marked as reviewed');
                        this.loadSubmission();
                    } else {
                        throw new Error('Failed to mark as reviewed');
                    }
                } catch (error) {
                    console.error('Error marking as reviewed:', error);
                    this.showError('Failed to mark as reviewed');
                }
            }

            async requestRevision() {
                const reason = prompt('Please provide a reason for requesting revision:');
                if (!reason) return;

                try {
                    const revisionData = {
                        reason: reason,
                        notifyStudent: true
                    };

                    const response = await apiUtils.post(`${this.apiBaseUrl}/api/Submissions/${this.submissionId}/request-revision`, revisionData);
                    
                    if (response.ok) {
                        this.showSuccess('Revision request sent to student');
                        this.loadSubmission();
                    } else {
                        throw new Error('Failed to request revision');
                    }
                } catch (error) {
                    console.error('Error requesting revision:', error);
                    this.showError('Failed to request revision');
                }
            }

            async deleteSubmission() {
                if (!confirm('Are you sure you want to delete this submission? This action cannot be undone.')) {
                    return;
                }

                try {
                    const response = await apiUtils.delete(`${this.apiBaseUrl}/api/Submissions/${this.submissionId}`);
                    
                    if (response.ok) {
                        this.showSuccess('Submission deleted successfully');
                        setTimeout(() => {
                            window.location.href = '/Submissions';
                        }, 1500);
                    } else {
                        throw new Error('Failed to delete submission');
                    }
                } catch (error) {
                    console.error('Error deleting submission:', error);
                    this.showError('Failed to delete submission');
                }
            }

            async downloadFiles() {
                try {
                    const response = await apiUtils.get(`${this.apiBaseUrl}/api/Submissions/${this.submissionId}/files/download`);
                    
                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `submission_${this.submissionId}_files.zip`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                    } else {
                        throw new Error('Failed to download files');
                    }
                } catch (error) {
                    console.error('Error downloading files:', error);
                    this.showError('Failed to download files');
                }
            }

            showSuccess(message) {
                // Implement toast notification
                console.log('Success:', message);
                // You can integrate with your existing notification system
            }

            showError(message) {
                // Implement toast notification
                console.error('Error:', message);
                alert(message); // Temporary - replace with proper toast
            }
        }

        // Global functions
        async function downloadFile(fileId) {
            try {
                const response = await apiUtils.get(`${detailsViewer.apiBaseUrl}/api/Files/${fileId}/download`);
                
                if (response.ok) {
                    const blob = await response.blob();
                    const disposition = response.headers.get('Content-Disposition');
                    const filename = disposition?.match(/filename="(.+)"/)?.[1] || `file_${fileId}`;
                    
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = filename;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                } else {
                    throw new Error('Failed to download file');
                }
            } catch (error) {
                console.error('Error downloading file:', error);
                detailsViewer.showError('Failed to download file');
            }
        }

        async function previewFile(fileId) {
            window.open(`${detailsViewer.apiBaseUrl}/api/Files/${fileId}/preview`, '_blank');
        }

        // Initialize when DOM is ready
        let detailsViewer;
        document.addEventListener('DOMContentLoaded', function() {
            detailsViewer = new SubmissionDetailsViewer();
        });
    </script>
}