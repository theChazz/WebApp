@page
@model WebApp.Pages.Submissions.IndexModel
@{
    ViewData["Title"] = "Submission Management";
    Layout = "_AdminLayout";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold mb-1">
                <i class="fas fa-paper-plane text-primary me-2"></i>
                Submission Management
            </h2>
            <p class="text-muted mb-0">Manage student submissions and track progress</p>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline-primary" id="exportBtn">
                <i class="fas fa-download me-1"></i>
                Export
            </button>
            <a href="/Submissions/Create" class="btn btn-primary">
                <i class="fas fa-plus me-1"></i>
                New Submission
            </a>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4" id="statisticsCards">
        <div class="col-md-3">
            <div class="card border-0 bg-gradient-primary text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-white-50">Total Submissions</h6>
                            <h3 class="card-title mb-0" id="totalSubmissions">-</h3>
                        </div>
                        <div class="text-white-50">
                            <i class="fas fa-paper-plane fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 bg-gradient-success text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-white-50">Graded</h6>
                            <h3 class="card-title mb-0" id="gradedSubmissions">-</h3>
                        </div>
                        <div class="text-white-50">
                            <i class="fas fa-check-circle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 bg-gradient-warning text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-white-50">Pending Review</h6>
                            <h3 class="card-title mb-0" id="pendingSubmissions">-</h3>
                        </div>
                        <div class="text-white-50">
                            <i class="fas fa-clock fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 bg-gradient-info text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="card-subtitle mb-1 text-white-50">Average Grade</h6>
                            <h3 class="card-title mb-0" id="averageGrade">-</h3>
                        </div>
                        <div class="text-white-50">
                            <i class="fas fa-chart-line fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-header bg-white border-bottom-0">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0 fw-semibold">
                    <i class="fas fa-filter me-2"></i>
                    Filters
                </h6>
                <button type="button" class="btn btn-sm btn-outline-secondary" id="toggleFilters">
                    <i class="fas fa-chevron-up" id="filterToggleIcon"></i>
                </button>
            </div>
        </div>
        <div class="card-body" id="filtersSection">
            <form method="get">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Search</label>
                        <input type="text" class="form-control" asp-for="Filters.Search" placeholder="Search submissions...">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Student</label>
                        <select class="form-select" asp-for="Filters.StudentId" id="studentSelect">
                            <option value="">All Students</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Assessment</label>
                        <select class="form-select" asp-for="Filters.AssessmentId" id="assessmentSelect">
                            <option value="">All Assessments</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Course</label>
                        <select class="form-select" asp-for="Filters.CourseId" id="courseSelect">
                            <option value="">All Courses</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Submission Status</label>
                        <select class="form-select" asp-for="Filters.SubmissionStatus">
                            <option value="">All Statuses</option>
                            <option value="Draft">Draft</option>
                            <option value="Submitted">Submitted</option>
                            <option value="Late">Late</option>
                            <option value="Resubmitted">Resubmitted</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Grading Status</label>
                        <select class="form-select" asp-for="Filters.GradingStatus">
                            <option value="">All Grading Status</option>
                            <option value="NotGraded">Not Graded</option>
                            <option value="InProgress">In Progress</option>
                            <option value="Graded">Graded</option>
                            <option value="NeedsReview">Needs Review</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Submitted After</label>
                        <input type="date" class="form-control" asp-for="Filters.SubmittedAfter">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Submitted Before</label>
                        <input type="date" class="form-control" asp-for="Filters.SubmittedBefore">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Grade Range</label>
                        <div class="input-group">
                            <input type="number" class="form-control" asp-for="Filters.MinGrade" placeholder="Min" step="0.01">
                            <span class="input-group-text">-</span>
                            <input type="number" class="form-control" asp-for="Filters.MaxGrade" placeholder="Max" step="0.01">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Options</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Filters.HasFiles" id="hasFiles">
                            <label class="form-check-label" for="hasFiles">
                                Has Files
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Filters.IsLate" id="isLate">
                            <label class="form-check-label" for="isLate">
                                Late Submissions
                            </label>
                        </div>
                    </div>
                    <div class="col-12">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search me-1"></i>
                            Apply Filters
                        </button>
                        <button type="button" class="btn btn-outline-secondary" id="clearFilters">
                            <i class="fas fa-times me-1"></i>
                            Clear
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Bulk Actions and View Controls -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="d-flex align-items-center gap-3">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="selectAll">
                <label class="form-check-label" for="selectAll">
                    Select All
                </label>
            </div>
            <div class="dropdown" id="bulkActionsDropdown" style="display: none;">
                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    <i class="fas fa-tasks me-1"></i>
                    Bulk Actions
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" id="bulkGrade">
                        <i class="fas fa-star me-2"></i>Grade Selected
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="bulkMarkReviewed">
                        <i class="fas fa-eye me-2"></i>Mark as Reviewed
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="bulkDownload">
                        <i class="fas fa-download me-2"></i>Download Files
                    </a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item text-danger" href="#" id="bulkDelete">
                        <i class="fas fa-trash me-2"></i>Delete Selected
                    </a></li>
                </ul>
            </div>
            <span class="text-muted" id="selectedCount" style="display: none;"></span>
        </div>
        <div class="d-flex align-items-center gap-2">
            <div class="btn-group" role="group">
                <input type="radio" class="btn-check" name="viewMode" id="gridView" value="grid" @(Model.ViewMode == "grid" ? "checked" : "")>
                <label class="btn btn-outline-secondary" for="gridView">
                    <i class="fas fa-th-large"></i>
                </label>
                <input type="radio" class="btn-check" name="viewMode" id="listView" value="list" @(Model.ViewMode == "list" ? "checked" : "")>
                <label class="btn btn-outline-secondary" for="listView">
                    <i class="fas fa-list"></i>
                </label>
            </div>
            <select class="form-select form-select-sm" style="width: auto;" asp-for="Filters.PageSize" id="pageSizeSelect">
                <option value="10">10 per page</option>
                <option value="20">20 per page</option>
                <option value="50">50 per page</option>
                <option value="100">100 per page</option>
            </select>
        </div>
    </div>

    <!-- Loading State -->
    <div class="text-center py-5" id="loadingState">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="text-muted mt-2">Loading submissions...</p>
    </div>

    <!-- Content Area -->
    <div id="contentArea" style="display: none;">
        <!-- Grid View -->
        <div id="gridViewContent" class="row g-3" style="display: none;">
            <!-- Populated by JavaScript -->
        </div>

        <!-- List View -->
        <div id="listViewContent" style="display: none;">
            <div class="card">
                <div class="table-responsive">
                    <table class="table table-hover mb-0" id="submissionsTable">
                        <thead class="table-light">
                            <tr>
                                <th width="40">
                                    <input type="checkbox" id="selectAllList">
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark" data-sort="Student">
                                        Student <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark" data-sort="Assessment">
                                        Assessment <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark" data-sort="Course">
                                        Course <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>
                                    <a href="#" class="text-decoration-none text-dark" data-sort="SubmittedAt">
                                        Submitted <i class="fas fa-sort ms-1"></i>
                                    </a>
                                </th>
                                <th>Status</th>
                                <th>Grade</th>
                                <th>Files</th>
                                <th width="120">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="submissionsTableBody">
                            <!-- Populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Pagination -->
        <nav aria-label="Submissions pagination" id="paginationContainer" style="display: none;">
            <ul class="pagination justify-content-center mt-4" id="pagination">
                <!-- Populated by JavaScript -->
            </ul>
        </nav>
    </div>

    <!-- Empty State -->
    <div class="text-center py-5" id="emptyState" style="display: none;">
        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
        <h5 class="text-muted">No submissions found</h5>
        <p class="text-muted">Try adjusting your filters or create a new submission.</p>
        <a href="/Submissions/Create" class="btn btn-primary">
            <i class="fas fa-plus me-1"></i>
            Create New Submission
        </a>
    </div>
</div>

@section Scripts {
    <script>
        class SubmissionManager {
            constructor() {
                this.apiBaseUrl = '@Model.ApiBaseUrl';
                this.currentPage = @Model.Filters.Page;
                this.pageSize = @Model.Filters.PageSize;
                this.viewMode = '@Model.ViewMode';
                this.selectedItems = new Set();
                this.init();
            }

            init() {
                this.bindEvents();
                this.loadStatistics();
                this.loadSubmissions();
                this.loadDropdownData();
            }

            bindEvents() {
                // View mode toggle
                document.querySelectorAll('input[name="viewMode"]').forEach(radio => {
                    radio.addEventListener('change', (e) => {
                        this.viewMode = e.target.value;
                        this.toggleView();
                        this.updateUrlParam('ViewMode', this.viewMode);
                    });
                });

                // Page size change
                document.getElementById('pageSizeSelect').addEventListener('change', (e) => {
                    this.pageSize = parseInt(e.target.value);
                    this.currentPage = 1;
                    this.loadSubmissions();
                });

                // Filter toggle
                document.getElementById('toggleFilters').addEventListener('click', () => {
                    const section = document.getElementById('filtersSection');
                    const icon = document.getElementById('filterToggleIcon');
                    section.style.display = section.style.display === 'none' ? 'block' : 'none';
                    icon.className = section.style.display === 'none' ? 'fas fa-chevron-down' : 'fas fa-chevron-up';
                });

                // Clear filters
                document.getElementById('clearFilters').addEventListener('click', () => {
                    document.querySelector('form').reset();
                    window.location.href = window.location.pathname;
                });

                // Select all functionality
                document.getElementById('selectAll').addEventListener('change', (e) => {
                    this.toggleSelectAll(e.target.checked);
                });

                // Bulk actions
                document.getElementById('bulkGrade').addEventListener('click', () => this.bulkGrade());
                document.getElementById('bulkMarkReviewed').addEventListener('click', () => this.bulkMarkReviewed());
                document.getElementById('bulkDownload').addEventListener('click', () => this.bulkDownload());
                document.getElementById('bulkDelete').addEventListener('click', () => this.bulkDelete());

                // Export functionality
                document.getElementById('exportBtn').addEventListener('click', () => this.exportSubmissions());
            }

            async loadStatistics() {
                try {
                    const response = await apiUtils.get(`${this.apiBaseUrl}/api/Submissions/statistics`);
                    if (response.ok) {
                        const stats = await response.json();
                        document.getElementById('totalSubmissions').textContent = stats.totalSubmissions || 0;
                        document.getElementById('gradedSubmissions').textContent = stats.gradedSubmissions || 0;
                        document.getElementById('pendingSubmissions').textContent = stats.pendingSubmissions || 0;
                        document.getElementById('averageGrade').textContent = stats.averageGrade ? 
                            `${stats.averageGrade.toFixed(1)}%` : 'N/A';
                    }
                } catch (error) {
                    console.error('Error loading statistics:', error);
                }
            }

            async loadSubmissions() {
                try {
                    document.getElementById('loadingState').style.display = 'block';
                    document.getElementById('contentArea').style.display = 'none';
                    document.getElementById('emptyState').style.display = 'none';

                    const params = new URLSearchParams(window.location.search);
                    params.set('page', this.currentPage);
                    params.set('pageSize', this.pageSize);

                    const response = await apiUtils.get(`${this.apiBaseUrl}/api/Submissions?${params.toString()}`);
                    
                    if (response.ok) {
                        const data = await response.json();
                        this.renderSubmissions(data.items || []);
                        this.renderPagination(data.pagination);
                        
                        if (data.items && data.items.length > 0) {
                            document.getElementById('contentArea').style.display = 'block';
                            this.toggleView();
                        } else {
                            document.getElementById('emptyState').style.display = 'block';
                        }
                    } else {
                        throw new Error('Failed to load submissions');
                    }
                } catch (error) {
                    console.error('Error loading submissions:', error);
                    this.showError('Failed to load submissions. Please try again.');
                } finally {
                    document.getElementById('loadingState').style.display = 'none';
                }
            }

            renderSubmissions(submissions) {
                if (this.viewMode === 'grid') {
                    this.renderGridView(submissions);
                } else {
                    this.renderListView(submissions);
                }
            }

            renderGridView(submissions) {
                const container = document.getElementById('gridViewContent');
                container.innerHTML = submissions.map(submission => `
                    <div class="col-md-6 col-xl-4">
                        <div class="card h-100 shadow-sm">
                            <div class="card-header bg-white border-bottom-0 pb-0">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="form-check">
                                        <input class="form-check-input item-checkbox" type="checkbox" value="${submission.id}">
                                    </div>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary" data-bs-toggle="dropdown">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li><a class="dropdown-item" href="/Submissions/Details/${submission.id}">
                                                <i class="fas fa-eye me-2"></i>View Details
                                            </a></li>
                                            <li><a class="dropdown-item" href="/Submissions/Edit/${submission.id}">
                                                <i class="fas fa-edit me-2"></i>Edit
                                            </a></li>
                                            ${submission.files && submission.files.length > 0 ? `
                                            <li><a class="dropdown-item" href="#" onclick="downloadSubmissionFiles(${submission.id})">
                                                <i class="fas fa-download me-2"></i>Download Files
                                            </a></li>
                                            ` : ''}
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item text-danger" href="#" onclick="deleteSubmission(${submission.id})">
                                                <i class="fas fa-trash me-2"></i>Delete
                                            </a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <h6 class="card-title mb-2">
                                    <i class="fas fa-user me-1 text-primary"></i>
                                    ${submission.student?.firstName} ${submission.student?.lastName}
                                </h6>
                                <h6 class="card-subtitle mb-2 text-muted">
                                    ${submission.assessment?.title}
                                </h6>
                                <p class="card-text small text-muted mb-2">
                                    <i class="fas fa-book me-1"></i>
                                    ${submission.course?.title}
                                </p>
                                <div class="mb-2">
                                    <span class="badge bg-${this.getSubmissionStatusColor(submission.submissionStatus)} me-1">
                                        ${submission.submissionStatus}
                                    </span>
                                    <span class="badge bg-${this.getGradingStatusColor(submission.gradingStatus)}">
                                        ${submission.gradingStatus}
                                    </span>
                                </div>
                                ${submission.grade !== null ? `
                                    <div class="mb-2">
                                        <span class="fw-semibold text-${submission.grade >= 70 ? 'success' : submission.grade >= 50 ? 'warning' : 'danger'}">
                                            Grade: ${submission.grade}%
                                        </span>
                                    </div>
                                ` : ''}
                                <small class="text-muted">
                                    <i class="fas fa-clock me-1"></i>
                                    Submitted: ${this.formatDate(submission.submittedAt)}
                                </small>
                                ${submission.files && submission.files.length > 0 ? `
                                    <div class="mt-2">
                                        <small class="text-info">
                                            <i class="fas fa-paperclip me-1"></i>
                                            ${submission.files.length} file(s)
                                        </small>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            renderListView(submissions) {
                const tbody = document.getElementById('submissionsTableBody');
                tbody.innerHTML = submissions.map(submission => `
                    <tr>
                        <td>
                            <input type="checkbox" class="item-checkbox" value="${submission.id}">
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="avatar avatar-sm bg-primary text-white rounded-circle me-2">
                                    ${(submission.student?.firstName?.charAt(0) || '') + (submission.student?.lastName?.charAt(0) || '')}
                                </div>
                                <div>
                                    <div class="fw-semibold">${submission.student?.firstName} ${submission.student?.lastName}</div>
                                    <small class="text-muted">${submission.student?.email}</small>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="fw-semibold">${submission.assessment?.title}</div>
                            <small class="text-muted">Due: ${this.formatDate(submission.assessment?.dueDate)}</small>
                        </td>
                        <td>
                            <span class="badge bg-secondary">${submission.course?.title}</span>
                        </td>
                        <td>
                            <div>${this.formatDate(submission.submittedAt)}</div>
                            ${submission.isLate ? '<small class="text-danger">Late</small>' : ''}
                        </td>
                        <td>
                            <span class="badge bg-${this.getSubmissionStatusColor(submission.submissionStatus)} me-1">
                                ${submission.submissionStatus}
                            </span>
                            <br>
                            <span class="badge bg-${this.getGradingStatusColor(submission.gradingStatus)} mt-1">
                                ${submission.gradingStatus}
                            </span>
                        </td>
                        <td>
                            ${submission.grade !== null ? 
                                `<span class="fw-semibold text-${submission.grade >= 70 ? 'success' : submission.grade >= 50 ? 'warning' : 'danger'}">
                                    ${submission.grade}%
                                </span>` : 
                                '<span class="text-muted">Not graded</span>'
                            }
                        </td>
                        <td>
                            ${submission.files && submission.files.length > 0 ? 
                                `<span class="text-info">
                                    <i class="fas fa-paperclip me-1"></i>
                                    ${submission.files.length}
                                </span>` : 
                                '<span class="text-muted">None</span>'
                            }
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a href="/Submissions/Details/${submission.id}" class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a href="/Submissions/Edit/${submission.id}" class="btn btn-outline-secondary btn-sm">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-outline-danger btn-sm" onclick="deleteSubmission(${submission.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
            }

            toggleView() {
                const gridView = document.getElementById('gridViewContent');
                const listView = document.getElementById('listViewContent');
                
                if (this.viewMode === 'grid') {
                    gridView.style.display = 'block';
                    listView.style.display = 'none';
                } else {
                    gridView.style.display = 'none';
                    listView.style.display = 'block';
                }
            }

            getSubmissionStatusColor(status) {
                const colors = {
                    'Draft': 'secondary',
                    'Submitted': 'primary',
                    'Late': 'warning',
                    'Resubmitted': 'info'
                };
                return colors[status] || 'secondary';
            }

            getGradingStatusColor(status) {
                const colors = {
                    'NotGraded': 'secondary',
                    'InProgress': 'warning',
                    'Graded': 'success',
                    'NeedsReview': 'danger'
                };
                return colors[status] || 'secondary';
            }

            formatDate(dateString) {
                if (!dateString) return 'N/A';
                return new Date(dateString).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }

            async loadDropdownData() {
                try {
                    // Load students
                    const studentsResponse = await apiUtils.get(`${this.apiBaseUrl}/api/Users?role=Student`);
                    if (studentsResponse.ok) {
                        const students = await studentsResponse.json();
                        const studentSelect = document.getElementById('studentSelect');
                        students.items?.forEach(student => {
                            const option = document.createElement('option');
                            option.value = student.id;
                            option.textContent = `${student.firstName} ${student.lastName}`;
                            studentSelect.appendChild(option);
                        });
                    }

                    // Load assessments
                    const assessmentsResponse = await apiUtils.get(`${this.apiBaseUrl}/api/Assessments`);
                    if (assessmentsResponse.ok) {
                        const assessments = await assessmentsResponse.json();
                        const assessmentSelect = document.getElementById('assessmentSelect');
                        assessments.items?.forEach(assessment => {
                            const option = document.createElement('option');
                            option.value = assessment.id;
                            option.textContent = assessment.title;
                            assessmentSelect.appendChild(option);
                        });
                    }

                    // Load courses
                    const coursesResponse = await apiUtils.get(`${this.apiBaseUrl}/api/Courses`);
                    if (coursesResponse.ok) {
                        const courses = await coursesResponse.json();
                        const courseSelect = document.getElementById('courseSelect');
                        courses.items?.forEach(course => {
                            const option = document.createElement('option');
                            option.value = course.id;
                            option.textContent = course.title;
                            courseSelect.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.error('Error loading dropdown data:', error);
                }
            }

            renderPagination(pagination) {
                if (!pagination) return;

                const container = document.getElementById('pagination');
                const totalPages = Math.ceil(pagination.totalCount / pagination.pageSize);
                
                if (totalPages <= 1) {
                    document.getElementById('paginationContainer').style.display = 'none';
                    return;
                }

                document.getElementById('paginationContainer').style.display = 'block';

                let html = '';
                
                // Previous button
                html += `
                    <li class="page-item ${pagination.currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${pagination.currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `;

                // Page numbers
                const startPage = Math.max(1, pagination.currentPage - 2);
                const endPage = Math.min(totalPages, pagination.currentPage + 2);

                if (startPage > 1) {
                    html += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
                    if (startPage > 2) {
                        html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                    }
                }

                for (let i = startPage; i <= endPage; i++) {
                    html += `
                        <li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `;
                }

                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                    }
                    html += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
                }

                // Next button
                html += `
                    <li class="page-item ${pagination.currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${pagination.currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `;

                container.innerHTML = html;

                // Bind pagination events
                container.querySelectorAll('a[data-page]').forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        const page = parseInt(e.target.closest('a').dataset.page);
                        if (page !== this.currentPage && page >= 1 && page <= totalPages) {
                            this.currentPage = page;
                            this.loadSubmissions();
                            this.updateUrlParam('page', page);
                        }
                    });
                });
            }

            toggleSelectAll(checked) {
                const checkboxes = document.querySelectorAll('.item-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = checked;
                    if (checked) {
                        this.selectedItems.add(checkbox.value);
                    } else {
                        this.selectedItems.delete(checkbox.value);
                    }
                });
                this.updateBulkActions();
            }

            updateBulkActions() {
                const bulkActions = document.getElementById('bulkActionsDropdown');
                const selectedCount = document.getElementById('selectedCount');
                
                if (this.selectedItems.size > 0) {
                    bulkActions.style.display = 'block';
                    selectedCount.style.display = 'block';
                    selectedCount.textContent = `${this.selectedItems.size} selected`;
                } else {
                    bulkActions.style.display = 'none';
                    selectedCount.style.display = 'none';
                }
            }

            async bulkGrade() {
                if (this.selectedItems.size === 0) return;
                // Implement bulk grading logic
                this.showSuccess('Bulk grading initiated');
            }

            async bulkMarkReviewed() {
                if (this.selectedItems.size === 0) return;
                // Implement bulk mark as reviewed logic
                this.showSuccess('Selected submissions marked as reviewed');
            }

            async bulkDownload() {
                if (this.selectedItems.size === 0) return;
                // Implement bulk download logic
                this.showInfo('Download prepared for selected submissions');
            }

            async bulkDelete() {
                if (this.selectedItems.size === 0) return;
                
                if (confirm(`Are you sure you want to delete ${this.selectedItems.size} selected submission(s)?`)) {
                    try {
                        const promises = Array.from(this.selectedItems).map(id => 
                            apiUtils.delete(`${this.apiBaseUrl}/api/Submissions/${id}`)
                        );
                        await Promise.all(promises);
                        this.selectedItems.clear();
                        this.loadSubmissions();
                        this.showSuccess('Selected submissions deleted successfully');
                    } catch (error) {
                        this.showError('Failed to delete selected submissions');
                    }
                }
            }

            async exportSubmissions() {
                try {
                    const params = new URLSearchParams(window.location.search);
                    const response = await apiUtils.get(`${this.apiBaseUrl}/api/Submissions/export?${params.toString()}`);
                    
                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `submissions_${new Date().toISOString().split('T')[0]}.xlsx`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        this.showSuccess('Submissions exported successfully');
                    }
                } catch (error) {
                    this.showError('Failed to export submissions');
                }
            }

            updateUrlParam(key, value) {
                const url = new URL(window.location);
                url.searchParams.set(key, value);
                window.history.replaceState({}, '', url);
            }

            showSuccess(message) {
                // Implement toast notification
                console.log('Success:', message);
            }

            showError(message) {
                // Implement toast notification
                console.error('Error:', message);
            }

            showInfo(message) {
                // Implement toast notification
                console.log('Info:', message);
            }
        }

        // Global functions
        async function deleteSubmission(id) {
            if (confirm('Are you sure you want to delete this submission?')) {
                try {
                    const response = await apiUtils.delete(`${submissionManager.apiBaseUrl}/api/Submissions/${id}`);
                    if (response.ok) {
                        submissionManager.loadSubmissions();
                        submissionManager.showSuccess('Submission deleted successfully');
                    } else {
                        throw new Error('Failed to delete submission');
                    }
                } catch (error) {
                    submissionManager.showError('Failed to delete submission');
                }
            }
        }

        async function downloadSubmissionFiles(id) {
            try {
                const response = await apiUtils.get(`${submissionManager.apiBaseUrl}/api/Submissions/${id}/files/download`);
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `submission_${id}_files.zip`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                }
            } catch (error) {
                submissionManager.showError('Failed to download files');
            }
        }

        // Initialize when DOM is ready
        let submissionManager;
        document.addEventListener('DOMContentLoaded', function() {
            submissionManager = new SubmissionManager();
        });
    </script>
}