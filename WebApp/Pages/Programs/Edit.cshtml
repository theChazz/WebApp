@page "{id:int}"
@model WebApp.Pages.Programs.EditModel
@{
    ViewData["Title"] = "Edit Program";
}

<div class="container mt-4">
    <h2>Edit Program</h2>
    <form id="editProgramForm" class="card">
        <div class="card-body">
            <input type="hidden" id="programTypeId" value="0">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" required>
            </div>
            <div class="mb-3">
                <label for="code" class="form-label">Code</label>
                <input type="text" class="form-control" id="code" required>
            </div>
            <div class="mb-3">
                <label for="level" class="form-label">Level</label>
                <input type="text" class="form-control" id="level" required>
            </div>
            <div class="mb-3">
                <label for="department" class="form-label">Department</label>
                <input type="text" class="form-control" id="department" required>
            </div>
            <div class="mb-3">
                <label for="programTypeSelect" class="form-label">Program Type</label>
                <select class="form-select" id="programTypeSelect" required>
                    <option value="">Select Program Type</option>
                </select>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" rows="3" required></textarea>
            </div>
            <div class="mb-3">
                <label for="durationMonths" class="form-label">Duration (Months)</label>
                <input type="number" class="form-control" id="durationMonths" required min="1">
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <a href="/Programs" class="btn btn-secondary">Cancel</a>
            </div>
        </div>
    </form>
    <div id="alert" class="alert mt-3" style="display: none;"></div>
</div>

@section Scripts {
    <script src="~/js/apiConfig.js"></script>
    <script src="~/js/debug.js"></script>
    <script>
        // Use consistent API base URL configuration
        const apiBaseUrl = (typeof apiConfig !== 'undefined' && apiConfig.baseUrl) ?
            apiConfig.baseUrl :
            '@Configuration["ApiSettings:BaseUrl"]';

        const programId = '@Model.Id';
        let currentProgramTypeId = 0;
        let currentProgramType = null;
        let programTypes = [];

        console.log('API Base URL:', apiBaseUrl);
        console.log('Program ID:', programId);

        // Debug checks
        window.LMSDebug.checkElements(['name', 'code', 'level', 'department', 'description', 'durationMonths']);
        window.LMSDebug.log('Program edit page initialized');

        async function loadProgramDetails() {
            try {
                console.log('Loading program from:', `${apiBaseUrl}/api/Program/${programId}`);

                const response = await fetch(`${apiBaseUrl}/api/Program/${programId}`);
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Response status:', response.status, 'Response:', errorText);
                    throw new Error(`Failed to load program details: ${response.status} ${response.statusText}`);
                }

                const program = await response.json();
                console.log('Program data received:', program);

                // Ensure all required elements exist before setting values
                const fields = ['name', 'code', 'level', 'department', 'description', 'durationMonths'];
                fields.forEach(field => {
                    const element = document.getElementById(field);
                    if (!element) {
                        console.warn(`Element with ID '${field}' not found`);
                    }
                });

                // Use camelCase (default) but fall back to PascalCase if present
                const name = program.name ?? program.Name;
                const code = program.code ?? program.Code;
                const level = program.level ?? program.Level;
                const department = program.department ?? program.Department;
                const description = program.description ?? program.Description;
                const durationMonths = program.durationMonths ?? program.DurationMonths;
                currentProgramTypeId = (program.programTypeId ?? program.ProgramTypeId) || 0;
                currentProgramType = program.programType ?? program.ProgramType ?? null;

                document.getElementById('name').value = name || '';
                document.getElementById('code').value = code || '';
                document.getElementById('level').value = level || '';
                document.getElementById('department').value = department || '';
                document.getElementById('description').value = description || '';
                document.getElementById('durationMonths').value = durationMonths || '';
                document.getElementById('programTypeId').value = currentProgramTypeId || 0;

                // Load program types and set the select
                await loadProgramTypes();
                const programTypeSelect = document.getElementById('programTypeSelect');
                if (currentProgramTypeId && currentProgramTypeId > 0) {
                    programTypeSelect.value = String(currentProgramTypeId);
                }

                // No textual Type fallback; ProgramTypeId must be selected

                console.log('Program form populated successfully');
            } catch (error) {
                console.error('Error loading program:', error);
                const alert = document.getElementById('alert');
                alert.className = 'alert alert-danger';
                alert.textContent = 'Error loading program details: ' + error.message;
                alert.style.display = 'block';
            }
        }

        document.getElementById('editProgramForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            // No fallback resolution; enforce select value

            // Final guard: require selection in dropdown
            const selectedProgramTypeId = parseInt(document.getElementById('programTypeSelect').value);
            if (!selectedProgramTypeId || selectedProgramTypeId === 0) {
                const alert = document.getElementById('alert');
                alert.className = 'alert alert-danger';
                alert.textContent = 'Please select a valid Program Type.';
                alert.style.display = 'block';
                document.getElementById('programTypeSelect').focus();
                return;
            }
            currentProgramTypeId = selectedProgramTypeId;
            document.getElementById('programTypeId').value = currentProgramTypeId;

            const programData = {
                id: parseInt(programId) || 0,
                name: document.getElementById('name').value.trim(),
                code: document.getElementById('code').value.trim(),
                level: document.getElementById('level').value.trim(),
                department: document.getElementById('department').value.trim(),
                description: document.getElementById('description').value.trim(),
                durationMonths: parseInt(document.getElementById('durationMonths').value) || 0,
                status: 'Active',
                programTypeId: parseInt(document.getElementById('programTypeId').value) || currentProgramTypeId || 0
            };
            console.log('Final programTypeId sent:', programData.programTypeId);

            console.log('Submitting program data:', programData);

            try {
                const response = await fetch(`${apiBaseUrl}/api/Program/${programId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(programData)
                });

                console.log('Update response status:', response.status);

                if (!response.ok) {
                    let errorMessage = 'Failed to update program';
                    try {
                        const contentType = response.headers.get('content-type') || '';
                        if (contentType.includes('application/json')) {
                            const errorData = await response.json();
                            errorMessage = errorData.message || errorData.title || JSON.stringify(errorData);
                        } else {
                            const errorText = await response.text();
                            errorMessage = errorText || errorMessage;
                        }
                    } catch (parseError) {
                        console.error('Error parsing error response:', parseError);
                        try {
                            const fallbackText = await response.text();
                            if (fallbackText) errorMessage = fallbackText;
                        } catch {}
                    }
                    throw new Error(errorMessage);
                }

                const result = await response.json();
                console.log('Update successful:', result);

                const alert = document.getElementById('alert');
                alert.className = 'alert alert-success';
                alert.textContent = 'Program updated successfully';
                alert.style.display = 'block';

                setTimeout(() => {
                    window.location.href = '/Programs';
                }, 1000);
            } catch (error) {
                console.error('Error updating program:', error);
                const alert = document.getElementById('alert');
                alert.className = 'alert alert-danger';
                alert.textContent = 'Error updating program: ' + error.message;
                alert.style.display = 'block';
            }
        });

        document.addEventListener('DOMContentLoaded', loadProgramDetails);

        // Removed textual Type resolution

        async function loadProgramTypes() {
            try {
                const res = await fetch(`${apiBaseUrl}/api/ProgramType`);
                if (!res.ok) throw new Error(`Failed to load Program Types (${res.status})`);
                programTypes = await res.json();
                const sel = document.getElementById('programTypeSelect');
                // Clear and add placeholder
                sel.innerHTML = '<option value="">Select Program Type</option>';
                programTypes.forEach(pt => {
                    const opt = document.createElement('option');
                    opt.value = String(pt.id ?? pt.Id);
                    opt.textContent = `${pt.code ?? pt.Code} - ${pt.name ?? pt.Name}`;
                    sel.appendChild(opt);
                });
            } catch (e) {
                console.error('Error loading program types:', e);
            }
        }
    </script>
}
