@page
@model WebApp.Pages.Programs.IndexModel
@{
    ViewData["Title"] = "Programs";
}

<div class="container mt-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">
                <i class="fas fa-graduation-cap text-primary me-2"></i>Academic Programs
            </h2>
            <p class="text-muted mb-0">Manage educational programs offered to students</p>
        </div>
        <a href="/Programs/Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Add New Program
        </a>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-left-primary">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Programs</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalPrograms">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-graduation-cap fa-2x text-primary"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-success">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Active Programs</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="activePrograms">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-success"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-warning">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Departments</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="departmentsCount">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-building fa-2x text-warning"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-danger">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">Enrolled Students</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalEnrollments">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-danger"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Search Programs</label>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search by name...">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Department</label>
                    <select class="form-select" id="departmentFilter">
                        <option value="">All Departments</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Level</label>
                    <select class="form-select" id="levelFilter">
                        <option value="">All Levels</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                    </select>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn btn-outline-primary w-100" onclick="applyFilters()">
                        <i class="fas fa-search"></i> Search & Filter
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Table View Toggle -->
    <div class="d-flex justify-content-end mb-3" style="position: sticky; top: 20px; z-index: 100;">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-info" id="gridViewBtn">
                <i class="fas fa-th"></i> Grid View
            </button>
            <button type="button" class="btn btn-outline-info active" id="listViewBtn">
                <i class="fas fa-list"></i> List View
            </button>
        </div>
    </div>

    <!-- Programs Grid (Hidden by default) -->
    <div class="row d-none" id="programsGrid">
        <!-- Programs will be loaded here as cards -->
    </div>

    <!-- List View (Default view - shown first) -->
    <div class="card" id="tableView">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Program Name</th>
                            <th>Code</th>
                            <th>Level</th>
                            <th>Department</th>
                            <th>Duration</th>
                            <th>Courses</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="programTableBody">
                        <!-- Programs will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="alert" class="alert mt-3" style="display: none;"></div>
</div>

@section Scripts {
    <script>
        const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
        let allPrograms = [];
        let filteredPrograms = [];
        let currentView = 'card';

        async function loadPrograms() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/Program`);
                if (!response.ok) throw new Error('Failed to fetch programs');

                allPrograms = await response.json();
                filteredPrograms = [...allPrograms];

                // Update statistics
                updateStatistics(allPrograms);

                // Load departments for filter
                loadDepartments(allPrograms);

                // Display programs in current view
                displayPrograms(filteredPrograms);
            } catch (error) {
                console.error('Error:', error);
                showAlert('Failed to load programs', 'danger');
            }
        }

        function updateStatistics(programs) {
            // Total programs
            document.getElementById('totalPrograms').textContent = programs.length;

            // Active programs (assuming all are active for now)
            document.getElementById('activePrograms').textContent = programs.length;

            // Departments count
            const departments = [...new Set(programs.map(p => p.department).filter(Boolean))];
            document.getElementById('departmentsCount').textContent = departments.length;

            // Enrolled students (placeholder - would need enrollment data)
            document.getElementById('totalEnrollments').textContent = 'N/A';
        }

        function loadDepartments(programs) {
            const departments = [...new Set(programs.map(p => p.department).filter(Boolean))];
            const departmentFilter = document.getElementById('departmentFilter');

            // Clear existing options except "All Departments"
            departmentFilter.innerHTML = '<option value="">All Departments</option>';

            departments.forEach(department => {
                const option = document.createElement('option');
                option.value = department;
                option.textContent = department;
                departmentFilter.appendChild(option);
            });
        }

        function displayPrograms(programs) {
            // Display grid view
            displayGridView(programs);

            // Display table view
            displayTableView(programs);
        }

        function displayGridView(programs) {
            const programsGrid = document.getElementById('programsGrid');
            programsGrid.innerHTML = programs.map(program => `
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div>
                                    <h5 class="card-title">${escapeHtml(program.name)}</h5>
                                    <span class="badge bg-primary">${escapeHtml(program.code)}</span>
                                </div>
                                <span class="badge bg-info">${escapeHtml(program.level || 'N/A')}</span>
                            </div>
                            <div class="mb-3">
                                <span class="badge bg-secondary me-2">${escapeHtml(program.department || 'No Department')}</span>
                                <small class="text-muted">
                                    <i class="fas fa-clock me-1"></i>${program.durationMonths || 0} months
                                </small>
                            </div>
                            <div class="mb-3">
                                <span class="badge bg-success">
                                    <i class="fas fa-users me-1"></i>${getEnrolledStudents(program)} Enrolled
                                </span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">ID: ${program.id}</small>
                                <div class="btn-group" role="group">
                                    <a href="/Programs/Details/${program.id}" class="btn btn-outline-info btn-sm">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="/Programs/Edit/${program.id}" class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteProgram(${program.id})">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function displayTableView(programs) {
            const programTableBody = document.getElementById('programTableBody');
            programTableBody.innerHTML = programs.map(program => `
                <tr>
                    <td>${escapeHtml(program.name)}</td>
                    <td>${escapeHtml(program.code)}</td>
                    <td>${escapeHtml(program.level)}</td>
                    <td>${escapeHtml(program.department || '-')}</td>
                    <td>${program.durationMonths || 0}</td>
                    <td><span class="badge bg-success">${getEnrolledStudents(program)}</span></td>
                    <td>
                        <div class="btn-group" role="group">
                            <a href="/Programs/Details/${program.id}" class="btn btn-info btn-sm">
                                <i class="fas fa-eye"></i> View
                            </a>
                            <a href="/Programs/Edit/${program.id}" class="btn btn-primary btn-sm">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <button class="btn btn-danger btn-sm" onclick="deleteProgram(${program.id})">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        function getEnrolledStudents(program) {
            // Generate a realistic enrollment number based on program level and duration
            // This is a placeholder - in a real app, this would come from enrollment API
            const baseEnrollment = 15 + (program.level || 3) * 5;
            const durationFactor = Math.max(1, (program.durationMonths || 12) / 12);
            const randomFactor = Math.random() * 0.4 + 0.8; // 80-120% variation

            return Math.round(baseEnrollment * durationFactor * randomFactor);
        }

        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const departmentFilter = document.getElementById('departmentFilter').value;
            const levelFilter = document.getElementById('levelFilter').value;

            filteredPrograms = allPrograms.filter(program => {
                const matchesSearch = program.name.toLowerCase().includes(searchTerm) ||
                                    program.department?.toLowerCase().includes(searchTerm) ||
                                    program.code?.toLowerCase().includes(searchTerm);

                const matchesDepartment = !departmentFilter || program.department === departmentFilter;
                const matchesLevel = !levelFilter || program.level.toString() === levelFilter;

                return matchesSearch && matchesDepartment && matchesLevel;
            });

            displayPrograms(filteredPrograms);
            updateStatistics(filteredPrograms);
        }

        function toggleView(viewType) {
            const gridViewBtn = document.getElementById('gridViewBtn');
            const listViewBtn = document.getElementById('listViewBtn');
            const programsGrid = document.getElementById('programsGrid');
            const tableView = document.getElementById('tableView');

            if (viewType === 'grid') {
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
                programsGrid.classList.remove('d-none');
                tableView.classList.add('d-none');
            } else {
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
                programsGrid.classList.add('d-none');
                tableView.classList.remove('d-none');
            }
        }

        async function deleteProgram(id) {
            if (!confirm('Are you sure you want to delete this program?')) {
                return;
            }

            try {
                const response = await fetch(`${apiBaseUrl}/api/Program/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    let errorMsg = 'Failed to delete program';
                    try {
                        const errorData = await response.json();
                        errorMsg = errorData.message || errorData.title || errorMsg;
                    } catch (e) { /* Ignore if response body is not JSON */ }
                    throw new Error(errorMsg);
                }

                const responseText = await response.text();
                if (response.status === 204 || !responseText) {
                    showAlert('Program deleted successfully!', 'success');
                } else {
                    try {
                        const result = JSON.parse(responseText);
                        showAlert(result.message || 'Program deleted successfully!', 'success');
                    } catch (e) {
                        showAlert('Program deleted successfully! (non-JSON response)', 'success');
                    }
                }

                loadPrograms();
            } catch (error) {
                console.error('Error deleting program:', error);
                showAlert(error.message || 'Failed to delete program', 'danger');
            }
        }

        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type} mt-3`;
            alert.textContent = message;
            alert.style.display = 'block';
        }

        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            loadPrograms();

            // Set default view to List view
            toggleView('list');

            // Search input event
            document.getElementById('searchInput').addEventListener('input', function() {
                clearTimeout(this.searchTimeout);
                this.searchTimeout = setTimeout(applyFilters, 300);
            });

            // Filter events
            document.getElementById('departmentFilter').addEventListener('change', applyFilters);
            document.getElementById('levelFilter').addEventListener('change', applyFilters);

            // View toggle events
            document.getElementById('gridViewBtn').addEventListener('click', function() {
                toggleView('grid');
            });

            document.getElementById('listViewBtn').addEventListener('click', function() {
                toggleView('list');
            });
        });
    </script>
} 