@page
@model WebApp.Pages.CourseLecturerAssignments.IndexModel
@{
    ViewData["Title"] = "Course Lecturer Assignments";
}

<div class="container mt-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">
                <i class="fas fa-chalkboard-teacher text-primary me-2"></i>Course Lecturer Assignments
            </h2>
            <p class="text-muted mb-0">Manage lecturer assignments to courses</p>
        </div>
        <a href="/CourseLecturerAssignments/Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Assign Lecturer
        </a>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-left-primary">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Assignments</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalAssignments">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chalkboard-teacher fa-2x text-primary"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-success">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Active Assignments</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="activeAssignments">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-success"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-warning">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Courses</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="coursesCount">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-graduation-cap fa-2x text-warning"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-left-danger">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">Lecturers</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="lecturersCount">-</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-danger"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Search Assignments</label>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search by course or lecturer...">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Course</label>
                    <input type="text" class="form-control" id="courseSearch" placeholder="Search course...">
                    <input type="hidden" id="courseIdFilter">
                    <div id="courseSuggestions" class="list-group position-absolute w-100" style="z-index: 1000; display:none;"></div>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Lecturer</label>
                    <input type="text" class="form-control" id="lecturerSearch" placeholder="Search lecturer...">
                    <input type="hidden" id="lecturerIdFilter">
                    <div id="lecturerSuggestions" class="list-group position-absolute w-100" style="z-index: 1000; display:none;"></div>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button class="btn btn-outline-primary w-100" onclick="applyFilters()">
                        <i class="fas fa-search"></i> Search & Filter
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Table View Toggle -->
    <div class="d-flex justify-content-end mb-3" style="position: sticky; top: 20px; z-index: 100;">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-info" id="gridViewBtn">
                <i class="fas fa-th"></i> Grid View
            </button>
            <button type="button" class="btn btn-outline-info active" id="listViewBtn">
                <i class="fas fa-list"></i> List View
            </button>
        </div>
    </div>

    <!-- Assignments Grid (Hidden by default) -->
    <div class="row d-none" id="assignmentsGrid">
        <!-- Assignments will be loaded here as cards -->
    </div>

    <!-- List View (Default view - shown first) -->
    <div class="card" id="tableView">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table">
                    <thead class="table-dark">
                        <tr>
                            <th>Course</th>
                        </tr>
                    </thead>
                    <tbody id="assignmentsTableBody">
                        <!-- Assignments will be loaded here grouped by course -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="alert" class="alert mt-3" style="display: none;"></div>
</div>

@section Scripts {
    <style>
        .course-header-row {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        .course-header-row:hover {
            background-color: #e3f2fd !important;
        }
        .course-assignment-row {
            background-color: #f8f9fa;
        }
        .course-assignment-row:hover {
            background-color: #e9ecef;
        }
        .course-assignment-row td:first-child {
            border-left: 3px solid #007bff;
        }
        .btn-group .btn {
            margin-right: 2px;
        }
        .table-primary {
            background-color: #e3f2fd;
        }
        .course-subheader-row {
            background-color: #f8f9fa !important;
            border-top: 2px solid #dee2e6;
            border-bottom: 1px solid #dee2e6;
        }
        .course-subheader-row td {
            padding: 8px 12px;
            font-weight: 600;
            color: #495057;
        }
    </style>

    <script>
        const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
        let allAssignments = [];
        let filteredAssignments = [];
        let currentView = 'list';
        let searchTimeout;

        async function loadCourseLecturerAssignments() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/CourseLecturerAssignment`);
                if (!response.ok) throw new Error('Failed to fetch course lecturer assignments');

                allAssignments = await response.json();
                filteredAssignments = [...allAssignments];

                // Update statistics
                updateStatistics(allAssignments);

                // Display assignments in current view
                displayAssignments(filteredAssignments);
            } catch (error) {
                console.error('Error:', error);
                showAlert('Failed to load course lecturer assignments', 'danger');
            }
        }

        function updateStatistics(assignments) {
            // Total assignments
            document.getElementById('totalAssignments').textContent = assignments.length;

            // Active assignments (assuming all are active for now)
            document.getElementById('activeAssignments').textContent = assignments.length;

            // Courses count
            const courses = [...new Set(assignments.map(a => a.course?.courseName).filter(Boolean))];
            document.getElementById('coursesCount').textContent = courses.length;

            // Lecturers count
            const lecturers = [...new Set(assignments.map(a => a.user?.fullName).filter(Boolean))];
            document.getElementById('lecturersCount').textContent = lecturers.length;
        }

        function displayAssignments(assignments) {
            // Display grid view
            displayGridView(assignments);

            // Display table view
            displayTableView(assignments);
        }

        function displayGridView(assignments) {
            const assignmentsGrid = document.getElementById('assignmentsGrid');
            assignmentsGrid.innerHTML = assignments.map(assignment => `
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div>
                                    <h5 class="card-title">${escapeHtml(assignment.course?.courseName || 'No Course')}</h5>
                                    <span class="badge bg-primary">${escapeHtml(assignment.user?.userRole?.name || 'Lecturer')}</span>
                                </div>
                                <span class="badge bg-success">Active</span>
                            </div>
                            <div class="mb-3">
                                <h6 class="text-primary mb-2">${escapeHtml(assignment.user?.fullName || 'No Lecturer')}</h6>
                                <small class="text-muted">
                                    <i class="fas fa-envelope me-1"></i>${escapeHtml(assignment.user?.email || 'No Email')}
                                </small>
                            </div>
                            <div class="mb-3">
                                <span class="badge bg-info">
                                    <i class="fas fa-calendar me-1"></i>${new Date(assignment.assignedAt).toLocaleDateString()}
                                </span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">ID: ${assignment.id}</small>
                                <div class="btn-group" role="group">
                                    <a href="/CourseLecturerAssignments/Details/${assignment.id}" class="btn btn-outline-info btn-sm">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="/CourseLecturerAssignments/Edit/${assignment.id}" class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteCourseLecturerAssignment(${assignment.id})">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function displayTableView(assignments) {
            const tableBody = document.getElementById('assignmentsTableBody');

            // Group assignments by course
            const groupedByCourse = assignments.reduce((groups, assignment) => {
                const courseId = assignment.course?.id || assignment.courseId || 'unknown';
                const courseName = assignment.course?.courseName || 'Unknown Course';

                if (!groups[courseId]) {
                    groups[courseId] = {
                        course: assignment.course || { id: courseId, courseName: courseName },
                        assignments: []
                    };
                }
                groups[courseId].assignments.push(assignment);
                return groups;
            }, {});

            // Create HTML for grouped display
            const html = Object.values(groupedByCourse).map(courseGroup => {
                const course = courseGroup.course;
                const assignments = courseGroup.assignments;
                const courseRowId = `course-${course.id}`;

                // Main course row
                let courseHtml = `
                    <tr class="table-primary course-header-row" onclick="toggleCourseAssignments('${courseRowId}')">
                        <td>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-graduation-cap text-primary me-2"></i>
                                <strong>${escapeHtml(course.courseName)}</strong>
                                <small class="text-muted ms-2">(${escapeHtml(course.category || 'Uncategorized')})</small>
                                <span class="badge bg-primary ms-2">${assignments.length} lecturer${assignments.length !== 1 ? 's' : ''}</span>
                            </div>
                        </td>
                    </tr>

                    <tr class="table-secondary course-subheader-row ${courseRowId}" style="display: none;">
                        <td>
                            <div class="row">
                                <div class="col-md-4"><strong>Lecturer</strong></div>
                                <div class="col-md-3"><strong>Email</strong></div>
                                <div class="col-md-2"><strong>Role</strong></div>
                                <div class="col-md-2"><strong>Assigned At</strong></div>
                                <div class="col-md-1"><strong>Actions</strong></div>
                            </div>
                        </td>
                    </tr>`;

                // Assignment rows (initially hidden)
                const assignmentRows = assignments.map(assignment => `
                    <tr class="course-assignment-row ${courseRowId}" style="display: none;">
                        <td>
                            <div class="row align-items-center">
                                <div class="col-md-4">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-user-graduate text-muted me-2"></i>
                                        ${escapeHtml(assignment.user?.fullName || 'No Lecturer')}
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">${escapeHtml(assignment.user?.email || 'No Email')}</small>
                                </div>
                                <div class="col-md-2">
                                    <span class="badge bg-secondary">${escapeHtml(assignment.user?.userRole?.name || 'Lecturer')}</span>
                                </div>
                                <div class="col-md-2">
                                    <small class="text-muted">${new Date(assignment.assignedAt).toLocaleDateString()}</small>
                                </div>
                                <div class="col-md-1">
                                    <div class="btn-group" role="group">
                                        <a href="/CourseLecturerAssignments/Details/${assignment.id}" class="btn btn-info btn-sm" title="View">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="/CourseLecturerAssignments/Edit/${assignment.id}" class="btn btn-primary btn-sm" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="btn btn-danger btn-sm" onclick="deleteCourseLecturerAssignment(${assignment.id})" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>`).join('');

                return courseHtml + assignmentRows;
            }).join('');

            tableBody.innerHTML = html;
        }

        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const courseId = document.getElementById('courseIdFilter').value;
            const lecturerId = document.getElementById('lecturerIdFilter').value;

            filteredAssignments = allAssignments.filter(assignment => {
                const matchesSearch = assignment.course?.courseName?.toLowerCase().includes(searchTerm) ||
                                    assignment.user?.fullName?.toLowerCase().includes(searchTerm) ||
                                    assignment.user?.email?.toLowerCase().includes(searchTerm);

                const matchesCourse = !courseId || assignment.courseId.toString() === courseId;
                const matchesLecturer = !lecturerId || assignment.userId.toString() === lecturerId;

                return matchesSearch && matchesCourse && matchesLecturer;
            });

            displayAssignments(filteredAssignments);
            updateStatistics(filteredAssignments);
        }

        function toggleCourseAssignments(courseRowId) {
            const assignmentRows = document.querySelectorAll(`.course-assignment-row.${courseRowId}`);
            const subheaderRow = document.querySelector(`.course-subheader-row.${courseRowId}`);

            const isVisible = assignmentRows.length > 0 && assignmentRows[0].style.display !== 'none';

            // Toggle assignment rows
            assignmentRows.forEach(row => {
                row.style.display = isVisible ? 'none' : 'table-row';
            });

            // Toggle subheader row
            if (subheaderRow) {
                subheaderRow.style.display = isVisible ? 'none' : 'table-row';
            }
        }

        function toggleView(viewType) {
            const gridViewBtn = document.getElementById('gridViewBtn');
            const listViewBtn = document.getElementById('listViewBtn');
            const assignmentsGrid = document.getElementById('assignmentsGrid');
            const tableView = document.getElementById('tableView');

            if (viewType === 'grid') {
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
                assignmentsGrid.classList.remove('d-none');
                tableView.classList.add('d-none');
            } else {
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
                assignmentsGrid.classList.add('d-none');
                tableView.classList.remove('d-none');
            }
        }

        async function deleteCourseLecturerAssignment(id) {
            if (!confirm('Are you sure you want to delete this assignment?')) {
                return;
            }

            try {
                const response = await fetch(`${apiBaseUrl}/api/CourseLecturerAssignment/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    let errorMsg = 'Failed to delete assignment';
                    try {
                        const errorData = await response.json();
                        errorMsg = errorData.message || errorData.title || errorMsg;
                    } catch (e) { /* Ignore if response body is not JSON */ }
                    throw new Error(errorMsg);
                }

                const responseText = await response.text();
                if (response.status === 204 || !responseText) {
                    showAlert('Assignment deleted successfully!', 'success');
                } else {
                    try {
                        const result = JSON.parse(responseText);
                        showAlert(result.message || 'Assignment deleted successfully!', 'success');
                    } catch (e) {
                        showAlert('Assignment deleted successfully! (non-JSON response)', 'success');
                    }
                }

                loadCourseLecturerAssignments();
            } catch (error) {
                console.error('Error deleting assignment:', error);
                showAlert(error.message || 'Failed to delete assignment', 'danger');
            }
        }

        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type} mt-3`;
            alert.textContent = message;
            alert.style.display = 'block';
        }

        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        async function searchCourses(term) {
            const list = document.getElementById('courseSuggestions');
            if (!term || term.length < 2) { list.style.display = 'none'; list.innerHTML=''; return; }
            try {
                const res = await fetch(`${apiBaseUrl}/api/Course/search?q=${encodeURIComponent(term)}`);
                if (!res.ok) return;
                const items = await res.json();
                list.innerHTML = items.map(c => `<button type="button" class="list-group-item list-group-item-action" data-id="${c.id}" data-name="${c.courseName}">${c.courseName}</button>`).join('');
                list.style.display = items.length ? 'block' : 'none';
                [...list.querySelectorAll('button')].forEach(btn => btn.addEventListener('click', () => {
                    document.getElementById('courseIdFilter').value = btn.getAttribute('data-id');
                    document.getElementById('courseSearch').value = btn.getAttribute('data-name');
                    list.style.display = 'none';
                    applyFilters();
                }));
            } catch (error) {
                console.error('Error searching courses:', error);
            }
        }

        async function searchLecturers(term) {
            const list = document.getElementById('lecturerSuggestions');
            if (!term || term.length < 2) { list.style.display = 'none'; list.innerHTML=''; return; }
            try {
                const res = await fetch(`${apiBaseUrl}/api/User/search?q=${encodeURIComponent(term)}&role=Lecturer`);
                if (!res.ok) return;
                const items = await res.json();
                list.innerHTML = items.map(u => `<button type="button" class="list-group-item list-group-item-action" data-id="${u.id}" data-name="${u.fullName}">${u.fullName} (${u.email})</button>`).join('');
                list.style.display = items.length ? 'block' : 'none';
                [...list.querySelectorAll('button')].forEach(btn => btn.addEventListener('click', () => {
                    document.getElementById('lecturerIdFilter').value = btn.getAttribute('data-id');
                    document.getElementById('lecturerSearch').value = btn.getAttribute('data-name');
                    list.style.display = 'none';
                    applyFilters();
                }));
            } catch (error) {
                console.error('Error searching lecturers:', error);
            }
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            loadCourseLecturerAssignments();

            // Set default view to List view
            toggleView('list');

            // Search input events
            document.getElementById('searchInput').addEventListener('input', function() {
                clearTimeout(this.searchTimeout);
                this.searchTimeout = setTimeout(applyFilters, 300);
            });

            document.getElementById('courseSearch').addEventListener('input', function(e) {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => searchCourses(e.target.value), 300);
            });

            document.getElementById('lecturerSearch').addEventListener('input', function(e) {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => searchLecturers(e.target.value), 300);
            });

            // View toggle events
            document.getElementById('gridViewBtn').addEventListener('click', function() {
                toggleView('grid');
            });

            document.getElementById('listViewBtn').addEventListener('click', function() {
                toggleView('list');
            });
        });
    </script>
} 