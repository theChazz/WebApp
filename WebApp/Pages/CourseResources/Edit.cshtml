@page "{courseId:int}"
@model WebApp.Pages.CourseResources.EditModel
@{
    ViewData["Title"] = "Edit Resource";
}

<div class="container mt-4">
  <div class="row justify-content-center">
    <div class="col-md-10">
      <div class="card">
        <div class="card-header"><h3 class="mb-0">Edit Resource</h3></div>
        <div class="card-body">
          <form id="editResourceForm">
            <input type="hidden" id="id" />
            <div class="row g-3">
              <div class="col-md-3">
                <label class="form-label" for="courseId">Course Id</label>
                <input type="number" class="form-control" id="courseId" readonly />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="type">Type</label>
                <select class="form-select" id="type" required>
                  <option value="Document">Document</option>
                  <option value="Video">Video</option>
                  <option value="LiveSession">Live Session</option>
                </select>
              </div>
              <div class="col-md-6">
                <label class="form-label" for="title">Title</label>
                <input class="form-control" id="title" maxlength="255" required />
              </div>
              <div class="col-12">
                <label class="form-label" for="description">Description</label>
                <textarea class="form-control" id="description" maxlength="1024"></textarea>
              </div>
              <div class="col-md-6">
                <label class="form-label" for="url">URL</label>
                <input class="form-control" id="url" maxlength="2048" required />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="provider">Provider</label>
                <input class="form-control" id="provider" maxlength="255" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="mimeType">Mime Type</label>
                <input class="form-control" id="mimeType" maxlength="255" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="sizeBytes">Size (bytes)</label>
                <input type="number" class="form-control" id="sizeBytes" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="startsAt">Starts At (UTC)</label>
                <input type="datetime-local" class="form-control" id="startsAt" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="endsAt">Ends At (UTC)</label>
                <input type="datetime-local" class="form-control" id="endsAt" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="timezone">Timezone</label>
                <input class="form-control" id="timezone" maxlength="100" />
              </div>
              <div class="col-md-3 d-flex align-items-center">
                <div class="form-check mt-4">
                  <input class="form-check-input" type="checkbox" id="isPublished" />
                  <label class="form-check-label" for="isPublished">Published</label>
                </div>
              </div>
              <div class="col-md-3">
                <label class="form-label" for="module">Module</label>
                <input class="form-control" id="module" maxlength="100" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="sortOrder">Sort Order</label>
                <input type="number" class="form-control" id="sortOrder" />
              </div>
            </div>

            <div class="d-flex justify-content-between mt-4">
              <a href="/CourseResources" class="btn btn-secondary"><i class="fas fa-arrow-left"></i> Back to List</a>
              <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i> Save</button>
            </div>
          </form>
        </div>
      </div>
      <div id="alert" class="alert mt-3" style="display: none;"></div>
    </div>
  </div>
</div>

@section Scripts {
<script>
const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
const id = new URLSearchParams(window.location.search).get('id');
const courseIdRoute = @Model.CourseId;

async function loadResource() {
  try {
    const res = await fetch(`${apiBaseUrl}/api/courses/${courseIdRoute}/resources/${id}`);
    if (!res.ok) throw new Error('Failed to load');
    const r = await res.json();
    document.getElementById('id').value = r.id;
    document.getElementById('courseId').value = r.courseId;
    document.getElementById('type').value = r.type;
    document.getElementById('title').value = r.title;
    document.getElementById('description').value = r.description || '';
    document.getElementById('url').value = r.url || '';
    document.getElementById('provider').value = r.provider || '';
    document.getElementById('mimeType').value = r.mimeType || '';
    document.getElementById('sizeBytes').value = r.sizeBytes || '';
    document.getElementById('startsAt').value = r.startsAt ? new Date(r.startsAt).toISOString().slice(0,16) : '';
    document.getElementById('endsAt').value = r.endsAt ? new Date(r.endsAt).toISOString().slice(0,16) : '';
    document.getElementById('timezone').value = r.timezone || '';
    document.getElementById('isPublished').checked = !!r.isPublished;
    document.getElementById('module').value = r.module || '';
    document.getElementById('sortOrder').value = r.sortOrder || '';
  } catch (e) {
    console.error(e);
    showAlert('Failed to load resource', 'danger');
  }
}

document.getElementById('editResourceForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const payload = {
    type: document.getElementById('type').value,
    title: document.getElementById('title').value,
    description: document.getElementById('description').value,
    url: document.getElementById('url').value,
    provider: document.getElementById('provider').value,
    mimeType: document.getElementById('mimeType').value,
    sizeBytes: document.getElementById('sizeBytes').value ? Number(document.getElementById('sizeBytes').value) : null,
    startsAt: document.getElementById('startsAt').value ? new Date(document.getElementById('startsAt').value).toISOString() : null,
    endsAt: document.getElementById('endsAt').value ? new Date(document.getElementById('endsAt').value).toISOString() : null,
    timezone: document.getElementById('timezone').value,
    isPublished: document.getElementById('isPublished').checked,
    module: document.getElementById('module').value,
    sortOrder: document.getElementById('sortOrder').value ? Number(document.getElementById('sortOrder').value) : null
  };
  try {
    const res = await fetch(`${apiBaseUrl}/api/courses/${courseIdRoute}/resources/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) {
      const text = await res.text();
      throw new Error(text || 'Failed to update');
    }
    showAlert('Saved successfully', 'success');
    setTimeout(() => { window.location.href = `/CourseResources/Details/${courseIdRoute}?id=${id}`; }, 1200);
  } catch (err) {
    console.error(err);
    showAlert(err.message || 'Failed to save', 'danger');
  }
});

function showAlert(message, type) {
  const alert = document.getElementById('alert');
  alert.className = `alert alert-${type} mt-3`;
  alert.textContent = message;
  alert.style.display = 'block';
}

document.addEventListener('DOMContentLoaded', loadResource);
</script>
}
