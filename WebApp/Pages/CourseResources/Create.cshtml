@page
@model WebApp.Pages.CourseResources.CreateModel
@{
    ViewData["Title"] = "Create Course Resource";
}

<div class="container mt-4">
  <div class="row justify-content-center">
    <div class="col-md-10">
      <div class="card">
        <div class="card-header"><h3 class="mb-0">Create New Resource</h3></div>
        <div class="card-body">
          <form id="createResourceForm">
            <div class="row g-3">
              <div class="col-md-6 position-relative">
                <label class="form-label" for="courseSearch">Course</label>
                <input type="text" class="form-control" id="courseSearch" placeholder="Search course by name..." required />
                <input type="hidden" id="courseId" />
                <div id="courseSuggestions" class="list-group position-absolute w-100" style="z-index: 1000; display:none;"></div>
              </div>
              <div class="col-md-3">
                <label class="form-label" for="type">Type</label>
                <select class="form-select" id="type" required>
                  <option value="Document">Document</option>
                  <option value="Video">Video</option>
                  <option value="LiveSession">Live Session</option>
                </select>
              </div>
              <div class="col-md-6">
                <label class="form-label" for="title">Title</label>
                <input class="form-control" id="title" maxlength="255" required />
              </div>
              <div class="col-12">
                <label class="form-label" for="description">Description</label>
                <textarea class="form-control" id="description" maxlength="1024"></textarea>
              </div>
              <div class="col-md-6">
                <label class="form-label" for="url">URL</label>
                <input class="form-control" id="url" maxlength="2048" required />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="provider">Provider</label>
                <input class="form-control" id="provider" maxlength="255" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="mimeType">Mime Type</label>
                <input class="form-control" id="mimeType" maxlength="255" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="sizeBytes">Size (bytes)</label>
                <input type="number" class="form-control" id="sizeBytes" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="startsAt">Starts At (UTC)</label>
                <input type="datetime-local" class="form-control" id="startsAt" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="endsAt">Ends At (UTC)</label>
                <input type="datetime-local" class="form-control" id="endsAt" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="timezone">Timezone</label>
                <input class="form-control" id="timezone" value="UTC" maxlength="100" />
              </div>
              <div class="col-md-3 d-flex align-items-center">
                <div class="form-check mt-4">
                  <input class="form-check-input" type="checkbox" id="isPublished" checked />
                  <label class="form-check-label" for="isPublished">Published</label>
                </div>
              </div>
              <div class="col-md-3">
                <label class="form-label" for="module">Module</label>
                <input class="form-control" id="module" maxlength="100" />
              </div>
              <div class="col-md-3">
                <label class="form-label" for="sortOrder">Sort Order</label>
                <input type="number" class="form-control" id="sortOrder" />
              </div>
            </div>

            <div class="d-flex justify-content-between mt-4">
              <a href="/CourseResources" class="btn btn-secondary"><i class="fas fa-arrow-left"></i> Back to List</a>
              <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i> Create</button>
            </div>
          </form>
        </div>
      </div>
      <div id="alert" class="alert mt-3" style="display: none;"></div>
    </div>
  </div>
</div>

@section Scripts {
<script>
const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
let searchTimeout;

async function searchCourses(term) {
  const list = document.getElementById('courseSuggestions');
  if (!term || term.length < 2) { list.style.display = 'none'; list.innerHTML=''; return; }
  const res = await fetch(`${apiBaseUrl}/api/Course/search?q=${encodeURIComponent(term)}`);
  if (!res.ok) return;
  const items = await res.json();
  list.innerHTML = items.map(c => `<button type="button" class="list-group-item list-group-item-action" data-id="${c.id}" data-name="${c.courseName}">${c.courseName}</button>`).join('');
  list.style.display = items.length ? 'block' : 'none';
  [...list.querySelectorAll('button')].forEach(btn => btn.addEventListener('click', () => {
    document.getElementById('courseId').value = btn.getAttribute('data-id');
    document.getElementById('courseSearch').value = btn.getAttribute('data-name');
    list.style.display = 'none';
  }));
}

document.addEventListener('DOMContentLoaded', () => {
  const input = document.getElementById('courseSearch');
  input.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => searchCourses(e.target.value), 300);
  });
});

document.getElementById('createResourceForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const payload = {
    courseId: Number(document.getElementById('courseId').value),
    type: document.getElementById('type').value,
    title: document.getElementById('title').value,
    description: document.getElementById('description').value,
    url: document.getElementById('url').value,
    provider: document.getElementById('provider').value,
    mimeType: document.getElementById('mimeType').value,
    sizeBytes: document.getElementById('sizeBytes').value ? Number(document.getElementById('sizeBytes').value) : null,
    startsAt: document.getElementById('startsAt').value ? new Date(document.getElementById('startsAt').value).toISOString() : null,
    endsAt: document.getElementById('endsAt').value ? new Date(document.getElementById('endsAt').value).toISOString() : null,
    timezone: document.getElementById('timezone').value,
    isPublished: document.getElementById('isPublished').checked,
    module: document.getElementById('module').value,
    sortOrder: document.getElementById('sortOrder').value ? Number(document.getElementById('sortOrder').value) : null
  };
  try {
    const res = await fetch(`${apiBaseUrl}/api/courses/${payload.courseId}/resources`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) {
      const text = await res.text();
      throw new Error(text || 'Failed to create');
    }
    showAlert('Resource created successfully!', 'success');
    setTimeout(() => { window.location.href = '/CourseResources'; }, 1200);
  } catch (err) {
    console.error(err);
    showAlert(err.message || 'Failed to create resource', 'danger');
  }
});

function showAlert(message, type) {
  const alert = document.getElementById('alert');
  alert.className = `alert alert-${type} mt-3`;
  alert.textContent = message;
  alert.style.display = 'block';
}
</script>
}
